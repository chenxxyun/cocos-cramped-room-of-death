{"version":3,"sources":["../file:/C:/ProgramData/cocos/editors/Creator/3.8.6/resources/resources/3d/engine/editor/assets/default_renderpipeline/file:/C:/ProgramData/cocos/editors/Creator/3.8.6/resources/resources/3d/engine/editor/assets/default_renderpipeline/builtin-pipeline-settings.ts","../file:/C:/ProgramData/cocos/editors/Creator/3.8.6/resources/resources/3d/engine/editor/assets/default_renderpipeline/file:/C:/ProgramData/cocos/editors/Creator/3.8.6/resources/resources/3d/engine/editor/assets/default_renderpipeline/builtin-pipeline-types.ts","../file:/C:/ProgramData/cocos/editors/Creator/3.8.6/resources/resources/3d/engine/editor/assets/default_renderpipeline/file:/C:/ProgramData/cocos/editors/Creator/3.8.6/resources/resources/3d/engine/editor/assets/default_renderpipeline/builtin-pipeline.ts"],"names":["ccclass","_decorator","disallowMultiple","executeInEditMode","menu","property","requireComponent","type","_dec","_dec2","_dec3","Camera","_dec4","CCBoolean","_dec5","displayName","_dec6","group","id","name","_dec7","style","CCInteger","range","_dec8","_dec9","tooltip","CCFloat","slide","_dec10","_dec11","Material","_dec12","_dec13","_dec14","min","_dec15","_dec16","_dec17","_dec18","Texture2D","_dec19","_dec20","_dec21","_dec22","_dec23","_dec24","_class","_descriptor","_applyDecoratedDescriptor","_class2","_Component","BuiltinPipelineSettings","_this","_len","arguments","length","args","Array","_key","call","apply","concat","_initializerDefineProperty","_assertThisInitialized","_descriptor2","_inheritsLoose","_proto","prototype","getPipelineSettings","this","_settings","onEnable","fillRequiredPipelineSettings","getComponent","camera","pipelineSettings","onDisable","_tryEnableEditorPreview","undefined","rendering","_editorPreview","setEditorPipelineSettings","_disableEditorPreview","getEditorPipelineSettings","_createClass","key","get","set","v","msaa","enabled","value","sampleCount","Math","pow","ceil","log2","max","enableShadingScale","shadingScale","bloom","material","enableAlphaMask","iterations","threshold","intensity","colorGrading","contribute","colorGradingMap","val","fxaa","fsr","sharpness","toneMapping","Component","configurable","enumerable","writable","initializer","makePipelineSettings","Object","getOwnPropertyDescriptor","_RF","pop","radiusScale","angleBiasDegree","blurSharpness","aoSaturation","needBlur","fillRequiredMSAA","makeMSAA","fillRequiredBloom","fillRequiredToneMapping","fillRequiredColorGrading","fillRequiredFSR","fillRequiredFXAA","SampleCount","gfx","X4","makeBloom","makeColorGrading","makeFSR","makeFXAA","makeToneMapping","AABB","geometry","Sphere","intersect","ClearFlagBit","Color","Format","FormatFeatureBit","LoadOp","StoreOp","TextureType","Viewport","scene","renderer","CameraUsage","CSMLevel","LightType","forwardNeedClearColor","clearFlag","COLOR","STENCIL","getCsmMainLightViewport","light","w","h","level","vp","screenSpaceSignY","shadowFixedArea","csmLevel","LEVEL_1","left","top","width","trunc","height","floor","PipelineConfigs","isWeb","isWebGL1","isWebGPU","isMobile","isHDR","useFloatOutput","toneMappingType","shadowEnabled","shadowMapFormat","R32F","shadowMapSize","Vec2","usePlanarShadow","supportDepthSample","mobileMaxSpotLightShadowMaps","platform","Vec4","setupPipelineConfigs","ppl","configs","sampleFeature","SAMPLED_TEXTURE","LINEAR_FILTER","device","sys","isNative","gfxAPI","API","WEBGL","WEBGPU","pipelineSceneData","getMacroBool","postSettings","shadowInfo","shadows","pipeline","supportsR32FloatTexture","RGBA8","size","ShadowType","Planar","capabilities","getFormatFeatures","DEPTH_STENCIL","x","clipSpaceSignY","defaultSettings","CameraConfigs","settings","isMainGameWindow","renderWindowId","colorName","depthStencilName","enableFullPipeline","enableProfiler","remainingPasses","nativeWidth","nativeHeight","enableHDR","radianceFormat","copyAndTonemapMaterial","enableStoreSceneDepth","sClearColorTransparentBlack","addCopyToScreenPass","pplConfigs","cameraConfigs","input","assert","pass","addRenderPass","addRenderTarget","CLEAR","STORE","addTexture","setVec4","addQueue","QueueHint","OPAQUE","addFullscreenQuad","getPingPongRenderTarget","prevName","prefix","startsWith","Number","charAt","ForwardLighting","lights","shadowEnabledSpotLights","_sphere","create","_boundingBox","_rangedDirLightBoundingBox","cullLights","frustum","cameraPos","_step","_iterator","_createForOfIteratorHelperLoose","spotLights","done","baked","position","y","z","sphereFrustum","push","_step2","_iterator2","sphereLights","_step3","_iterator3","pointLights","_step4","_iterator4","rangedDirLights","transform","node","getWorldMatrix","aabbFrustum","sort","lhs","rhs","Vec3","squaredDistance","_addLightQueues","_step5","_iterator5","queue","BLEND","SPHERE","SPOT","POINT","RANGED_DIRECTIONAL","addScene","SceneFlags","addSpotlightShadowPasses","maxNumShadowMaps","_step6","i","_iterator6","shadowPass","addDepthStencil","DISCARD","NONE","MASK","SHADOW_CASTER","useLightFrustum","addLightQueues","_step7","_iterator7","addLightPasses","depthStencilStoreOp","viewport","_step8","count","_iterator8","storeOp","setViewport","LOAD","isMultipleLightPassesNeeded","BuiltinForwardPassBuilder","forwardLighting","_viewport","_clearColor","_reflectionProbeClearColor","_proto2","getConfigOrder","ConfigOrder","getRenderOrder","RenderOrder","configCamera","pipelineConfigs","enableMainLightShadowMap","mainLight","enableMainLightPlanarShadowMap","enablePlanarReflectionProbe","cameraUsage","SCENE_VIEW","GAME_VIEW","enableMSAA","enableSingleForwardPass","windowResize","window","ResourceFlags","ResourceResidency","TEX2D","COLOR_ATTACHMENT","MEMORYLESS","DEPTH_STENCIL_ATTACHMENT","setup","context","_addCascadedShadowMapPass","_tryAddReflectionProbePasses","_addForwardRadiancePasses","shadowSize","csmSupported","reflectionProbeManager","cclegacy","internal","_step9","probes","getProbes","probeID","_iterator9","probe","needRender","area","renderArea","probeType","ProbeType","PLANAR","realtimePlanarTexture","addRenderWindow","probePass","_buildReflectionProbePass","colorStoreOp","clearColor","packRGBE","clearDepth","clearStencil","REFLECTION_PROBE","disableMSAA","round","_addForwardSingleRadiancePass","_addForwardMultipleRadiancePasses","_addPlanarShadowQueue","sceneFlags","geometryRenderer","GEOMETRY","msaaRadianceName","msaaDepthStencilName","msPass","addMultisampleRenderPass","_buildForwardMainLightPass","resolveRenderTarget","firstStoreOp","PLANAR_SHADOW","BuiltinBloomPassBuilder","_clearColorTransparentBlack","_bloomParams","_bloomTexSize","_bloomWidths","_bloomHeights","_bloomTexNames","_proto3","enableBloom","bloomWidth","bloomHeight","prevRenderPass","_addKawaseDualFilterBloomPasses","bloomMaterial","radianceName","sizeCount","prefilterPass","downPass","upPass","combinePass","BuiltinToneMappingPassBuilder","_colorGradingTexSize","_proto4","enableColorGrading","enableToneMapping","setProperty","_addCopyAndTonemapPass","ldrColorPrefix","ldrColorName","lutTex","isSquareMap","setVec2","setFloat","BuiltinFXAAPassBuilder","_fxaaParams","_proto5","enableFXAA","_addFxaaPass","inputColorName","fxaaMaterial","BuiltinFsrPassBuilder","_fsrParams","_fsrTexSize","_proto6","enableFSR","outputColorName","_addFsrPass","fsrMaterial","clamp","fsrColorName","easuPass","rcasPass","BuiltinUiPassBuilder","_proto7","flags","UI","PROFILER","showStatistics","BuiltinPipelineBuilder","_pipelineEvent","director","root","pipelineEvent","_forwardPass","_bloomPass","_toneMappingPass","_fxaaPass","_fsrPass","_uiPass","_configs","_cameraConfigs","_copyAndTonemapMaterial","_initialized","_passBuilders","_proto8","_setupPipelinePreview","PREVIEW","editorSettings","_preparePipelinePasses","passBuilders","_passes","_step10","_iterator10","_setupBuiltinCameraConfigs","GAME","swapchain","visibility","Layers","Enum","DEFAULT","DEBUG","RGBA16F","_setupCameraConfigs","a","b","_step11","_iterator11","builder","_step12","_iterator12","cameras","_initMaterials","_step13","_iterator13","emit","PipelineEventType","RENDER_CAMERA_BEGIN","_buildForwardPipeline","_buildSimplePipeline","RENDER_CAMERA_END","sortPipelinePassBuildersByRenderOrder","_step14","lastPass","_iterator14","_uuid","initialize","effectName","effectAsset","setCustomPipeline"],"mappings":"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","file":"all.js","sourcesContent":["/*\r\n Copyright (c) 2021-2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    _decorator, Camera, CCBoolean, CCFloat, CCInteger, Component,\r\n    Material, rendering, Texture2D,\r\n} from 'cc';\r\n\r\nimport { EDITOR } from 'cc/env';\r\n\r\nimport {\r\n    fillRequiredPipelineSettings, makePipelineSettings, PipelineSettings,\r\n} from './builtin-pipeline-types';\r\n\r\nconst { ccclass, disallowMultiple, executeInEditMode, menu, property, requireComponent, type } = _decorator;\r\n\r\n@ccclass('BuiltinPipelineSettings')\r\n@menu('Rendering/BuiltinPipelineSettings')\r\n@requireComponent(Camera)\r\n@disallowMultiple\r\n@executeInEditMode\r\nexport class BuiltinPipelineSettings extends Component {\r\n    @property\r\n    private readonly _settings: PipelineSettings = makePipelineSettings();\r\n\r\n    getPipelineSettings(): PipelineSettings {\r\n        return this._settings;\r\n    }\r\n\r\n    // Enable/Disable\r\n    onEnable(): void {\r\n        fillRequiredPipelineSettings(this._settings);\r\n        const cameraComponent = this.getComponent(Camera)!;\r\n        const camera = cameraComponent.camera;\r\n        camera.pipelineSettings = this._settings;\r\n\r\n        if (EDITOR) {\r\n            this._tryEnableEditorPreview();\r\n        }\r\n    }\r\n    onDisable(): void {\r\n        const cameraComponent = this.getComponent(Camera)!;\r\n        const camera = cameraComponent.camera;\r\n        camera.pipelineSettings = null;\r\n\r\n        if (EDITOR) {\r\n            this._disableEditorPreview();\r\n        }\r\n    }\r\n\r\n    // Editor Preview\r\n    @property(CCBoolean)\r\n    protected _editorPreview = false;\r\n\r\n    @property({\r\n        displayName: 'Editor Preview (Experimental)',\r\n        type: CCBoolean,\r\n    })\r\n    get editorPreview(): boolean {\r\n        return this._editorPreview;\r\n    }\r\n    set editorPreview(v: boolean) {\r\n        this._editorPreview = v;\r\n        if (EDITOR) {\r\n            this._tryEnableEditorPreview();\r\n        }\r\n    }\r\n    public _tryEnableEditorPreview(): void {\r\n        if (rendering === undefined) {\r\n            return;\r\n        }\r\n        if (this._editorPreview) {\r\n            rendering.setEditorPipelineSettings(this._settings);\r\n        } else {\r\n            this._disableEditorPreview();\r\n        }\r\n    }\r\n    public _disableEditorPreview(): void {\r\n        if (rendering === undefined) {\r\n            return;\r\n        }\r\n        const current = rendering.getEditorPipelineSettings() as PipelineSettings | null;\r\n        if (current === this._settings) {\r\n            rendering.setEditorPipelineSettings(null);\r\n        }\r\n    }\r\n\r\n    // MSAA\r\n    @property({\r\n        group: { id: 'MSAA', name: 'Multisample Anti-Aliasing' },\r\n        type: CCBoolean,\r\n    })\r\n    get MsaaEnable(): boolean {\r\n        return this._settings.msaa.enabled;\r\n    }\r\n    set MsaaEnable(value: boolean) {\r\n        this._settings.msaa.enabled = value;\r\n        if (EDITOR) {\r\n            this._tryEnableEditorPreview();\r\n        }\r\n    }\r\n\r\n    @property({\r\n        group: { id: 'MSAA', name: 'Multisample Anti-Aliasing', style: 'section' },\r\n        type: CCInteger,\r\n        range: [2, 4, 2],\r\n    })\r\n    set msaaSampleCount(value: number) {\r\n        value = 2 ** Math.ceil(Math.log2(Math.max(value, 2)));\r\n        value = Math.min(value, 4);\r\n        this._settings.msaa.sampleCount = value;\r\n        if (EDITOR) {\r\n            this._tryEnableEditorPreview();\r\n        }\r\n    }\r\n    get msaaSampleCount(): number {\r\n        return this._settings.msaa.sampleCount;\r\n    }\r\n\r\n    // Shading Scale\r\n    @property({\r\n        group: { id: 'ShadingScale', name: 'ShadingScale', style: 'section' },\r\n        type: CCBoolean,\r\n    })\r\n    set shadingScaleEnable(value: boolean) {\r\n        this._settings.enableShadingScale = value;\r\n        if (EDITOR) {\r\n            this._tryEnableEditorPreview();\r\n        }\r\n    }\r\n    get shadingScaleEnable(): boolean {\r\n        return this._settings.enableShadingScale;\r\n    }\r\n\r\n    @property({\r\n        tooltip: 'i18n:postprocess.shadingScale',\r\n        group: { id: 'ShadingScale', name: 'ShadingScale' },\r\n        type: CCFloat,\r\n        range: [0.01, 4, 0.01],\r\n        slide: true,\r\n    })\r\n    set shadingScale(value: number) {\r\n        this._settings.shadingScale = value;\r\n        if (EDITOR) {\r\n            this._tryEnableEditorPreview();\r\n        }\r\n    }\r\n    get shadingScale(): number {\r\n        return this._settings.shadingScale;\r\n    }\r\n\r\n    // Bloom\r\n    @property({\r\n        group: { id: 'Bloom', name: 'Bloom (PostProcessing)', style: 'section' },\r\n        type: CCBoolean,\r\n    })\r\n    set bloomEnable(value: boolean) {\r\n        this._settings.bloom.enabled = value;\r\n        if (EDITOR) {\r\n            this._tryEnableEditorPreview();\r\n        }\r\n    }\r\n    get bloomEnable(): boolean {\r\n        return this._settings.bloom.enabled;\r\n    }\r\n\r\n    @property({\r\n        group: { id: 'Bloom', name: 'Bloom (PostProcessing)', style: 'section' },\r\n        type: Material,\r\n    })\r\n    set bloomMaterial(value: Material) {\r\n        if (this._settings.bloom.material === value) {\r\n            return;\r\n        }\r\n        this._settings.bloom.material = value;\r\n        if (EDITOR) {\r\n            this._tryEnableEditorPreview();\r\n        }\r\n    }\r\n    get bloomMaterial(): Material {\r\n        return this._settings.bloom.material!;\r\n    }\r\n\r\n    @property({\r\n        tooltip: 'i18n:bloom.enableAlphaMask',\r\n        group: { id: 'Bloom', name: 'Bloom (PostProcessing)', style: 'section' },\r\n        type: CCBoolean,\r\n    })\r\n    set bloomEnableAlphaMask(value: boolean) {\r\n        this._settings.bloom.enableAlphaMask = value;\r\n        if (EDITOR) {\r\n            this._tryEnableEditorPreview();\r\n        }\r\n    }\r\n    get bloomEnableAlphaMask(): boolean {\r\n        return this._settings.bloom.enableAlphaMask;\r\n    }\r\n\r\n    @property({\r\n        tooltip: 'i18n:bloom.iterations',\r\n        group: { id: 'Bloom', name: 'Bloom (PostProcessing)', style: 'section' },\r\n        type: CCInteger,\r\n        range: [1, 6, 1],\r\n        slide: true,\r\n    })\r\n    set bloomIterations(value: number) {\r\n        this._settings.bloom.iterations = value;\r\n        if (EDITOR) {\r\n            this._tryEnableEditorPreview();\r\n        }\r\n    }\r\n    get bloomIterations(): number {\r\n        return this._settings.bloom.iterations;\r\n    }\r\n\r\n    @property({\r\n        tooltip: 'i18n:bloom.threshold',\r\n        group: { id: 'Bloom', name: 'Bloom (PostProcessing)', style: 'section' },\r\n        type: CCFloat,\r\n        min: 0,\r\n    })\r\n    set bloomThreshold(value: number) {\r\n        this._settings.bloom.threshold = value;\r\n    }\r\n    get bloomThreshold(): number {\r\n        return this._settings.bloom.threshold;\r\n    }\r\n\r\n    set bloomIntensity(value: number) {\r\n        this._settings.bloom.intensity = value;\r\n    }\r\n    get bloomIntensity(): number {\r\n        return this._settings.bloom.intensity;\r\n    }\r\n\r\n    // Color Grading (LDR)\r\n    @property({\r\n        group: { id: 'Color Grading', name: 'ColorGrading (LDR) (PostProcessing)', style: 'section' },\r\n        type: CCBoolean,\r\n    })\r\n    set colorGradingEnable(value: boolean) {\r\n        this._settings.colorGrading.enabled = value;\r\n        if (EDITOR) {\r\n            this._tryEnableEditorPreview();\r\n        }\r\n    }\r\n    get colorGradingEnable(): boolean {\r\n        return this._settings.colorGrading.enabled;\r\n    }\r\n\r\n    @property({\r\n        group: { id: 'Color Grading', name: 'ColorGrading (LDR) (PostProcessing)', style: 'section' },\r\n        type: Material,\r\n    })\r\n    set colorGradingMaterial(value: Material) {\r\n        if (this._settings.colorGrading.material === value) {\r\n            return;\r\n        }\r\n        this._settings.colorGrading.material = value;\r\n        if (EDITOR) {\r\n            this._tryEnableEditorPreview();\r\n        }\r\n    }\r\n    get colorGradingMaterial(): Material {\r\n        return this._settings.colorGrading.material!;\r\n    }\r\n\r\n    @property({\r\n        tooltip: 'i18n:color_grading.contribute',\r\n        group: { id: 'Color Grading', name: 'ColorGrading (LDR) (PostProcessing)', style: 'section' },\r\n        type: CCFloat,\r\n        range: [0, 1, 0.01],\r\n        slide: true,\r\n    })\r\n    set colorGradingContribute(value: number) {\r\n        this._settings.colorGrading.contribute = value;\r\n    }\r\n    get colorGradingContribute(): number {\r\n        return this._settings.colorGrading.contribute;\r\n    }\r\n\r\n    @property({\r\n        tooltip: 'i18n:color_grading.originalMap',\r\n        group: { id: 'Color Grading', name: 'ColorGrading (LDR) (PostProcessing)', style: 'section' },\r\n        type: Texture2D,\r\n    })\r\n    set colorGradingMap(val: Texture2D) {\r\n        this._settings.colorGrading.colorGradingMap = val;\r\n        if (EDITOR) {\r\n            this._tryEnableEditorPreview();\r\n        }\r\n    }\r\n    get colorGradingMap(): Texture2D {\r\n        return this._settings.colorGrading.colorGradingMap!;\r\n    }\r\n\r\n    // FXAA\r\n    @property({\r\n        group: { id: 'FXAA', name: 'Fast Approximate Anti-Aliasing (PostProcessing)', style: 'section' },\r\n        type: CCBoolean,\r\n    })\r\n    set fxaaEnable(value: boolean) {\r\n        this._settings.fxaa.enabled = value;\r\n        if (EDITOR) {\r\n            this._tryEnableEditorPreview();\r\n        }\r\n    }\r\n    get fxaaEnable(): boolean {\r\n        return this._settings.fxaa.enabled;\r\n    }\r\n\r\n    @property({\r\n        group: { id: 'FXAA', name: 'Fast Approximate Anti-Aliasing (PostProcessing)', style: 'section' },\r\n        type: Material,\r\n    })\r\n    set fxaaMaterial(value: Material) {\r\n        if (this._settings.fxaa.material === value) {\r\n            return;\r\n        }\r\n        this._settings.fxaa.material = value;\r\n        if (EDITOR) {\r\n            this._tryEnableEditorPreview();\r\n        }\r\n    }\r\n    get fxaaMaterial(): Material {\r\n        return this._settings.fxaa.material!;\r\n    }\r\n\r\n    // FSR\r\n    @property({\r\n        group: { id: 'FSR', name: 'FidelityFX Super Resolution', style: 'section' },\r\n        type: CCBoolean,\r\n    })\r\n    set fsrEnable(value: boolean) {\r\n        this._settings.fsr.enabled = value;\r\n        if (EDITOR) {\r\n            this._tryEnableEditorPreview();\r\n        }\r\n    }\r\n    get fsrEnable(): boolean {\r\n        return this._settings.fsr.enabled;\r\n    }\r\n\r\n    @property({\r\n        group: { id: 'FSR', name: 'FidelityFX Super Resolution', style: 'section' },\r\n        type: Material,\r\n    })\r\n    set fsrMaterial(value: Material) {\r\n        if (this._settings.fsr.material === value) {\r\n            return;\r\n        }\r\n        this._settings.fsr.material = value;\r\n        if (EDITOR) {\r\n            this._tryEnableEditorPreview();\r\n        }\r\n    }\r\n    get fsrMaterial(): Material {\r\n        return this._settings.fsr.material!;\r\n    }\r\n\r\n    @property({\r\n        group: { id: 'FSR', name: 'FidelityFX Super Resolution', style: 'section' },\r\n        type: CCFloat,\r\n        range: [0, 1, 0.01],\r\n        slide: true,\r\n    })\r\n    set fsrSharpness(value: number) {\r\n        this._settings.fsr.sharpness = value;\r\n    }\r\n    get fsrSharpness(): number {\r\n        return this._settings.fsr.sharpness;\r\n    }\r\n\r\n    @property({\r\n        group: { id: 'ToneMapping', name: 'ToneMapping', style: 'section' },\r\n        type: Material,\r\n    })\r\n    set toneMappingMaterial(value: Material) {\r\n        if (this._settings.toneMapping.material === value) {\r\n            return;\r\n        }\r\n        this._settings.toneMapping.material = value;\r\n        if (EDITOR) {\r\n            this._tryEnableEditorPreview();\r\n        }\r\n    }\r\n    get toneMappingMaterial(): Material {\r\n        return this._settings.toneMapping.material!;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2021-2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/**\r\n * ========================= !DO NOT CHANGE THE FOLLOWING SECTION MANUALLY! =========================\r\n * The following section is auto-generated.\r\n * ========================= !DO NOT CHANGE THE FOLLOWING SECTION MANUALLY! =========================\r\n */\r\n/* eslint-disable max-len */\r\nimport { Material, Texture2D, gfx } from 'cc';\r\n\r\nconst { SampleCount } = gfx;\r\n\r\nexport interface MSAA {\r\n    enabled: boolean; /* false */\r\n    sampleCount: gfx.SampleCount; /* SampleCount.X4 */\r\n    [name: string]: unknown;\r\n}\r\n\r\nexport function makeMSAA(): MSAA {\r\n    return {\r\n        enabled: false,\r\n        sampleCount: SampleCount.X4,\r\n    };\r\n}\r\n\r\nexport function fillRequiredMSAA(value: MSAA): void {\r\n    if (value.enabled === undefined) {\r\n        value.enabled = false;\r\n    }\r\n    if (value.sampleCount === undefined) {\r\n        value.sampleCount = SampleCount.X4;\r\n    }\r\n}\r\n\r\nexport interface HBAO {\r\n    enabled: boolean; /* false */\r\n    radiusScale: number; /* 1 */\r\n    angleBiasDegree: number; /* 10 */\r\n    blurSharpness: number; /* 3 */\r\n    aoSaturation: number; /* 1 */\r\n    needBlur: boolean; /* false */\r\n    [name: string]: unknown;\r\n}\r\n\r\nexport function makeHBAO(): HBAO {\r\n    return {\r\n        enabled: false,\r\n        radiusScale: 1,\r\n        angleBiasDegree: 10,\r\n        blurSharpness: 3,\r\n        aoSaturation: 1,\r\n        needBlur: false,\r\n    };\r\n}\r\n\r\nexport function fillRequiredHBAO(value: HBAO): void {\r\n    if (value.enabled === undefined) {\r\n        value.enabled = false;\r\n    }\r\n    if (value.radiusScale === undefined) {\r\n        value.radiusScale = 1;\r\n    }\r\n    if (value.angleBiasDegree === undefined) {\r\n        value.angleBiasDegree = 10;\r\n    }\r\n    if (value.blurSharpness === undefined) {\r\n        value.blurSharpness = 3;\r\n    }\r\n    if (value.aoSaturation === undefined) {\r\n        value.aoSaturation = 1;\r\n    }\r\n    if (value.needBlur === undefined) {\r\n        value.needBlur = false;\r\n    }\r\n}\r\n\r\nexport interface Bloom {\r\n    enabled: boolean; /* false */\r\n    /* refcount */ material: Material | null;\r\n    enableAlphaMask: boolean; /* false */\r\n    iterations: number; /* 3 */\r\n    threshold: number; /* 0.8 */\r\n    intensity: number; /* 2.3 */\r\n    [name: string]: unknown;\r\n}\r\n\r\nexport function makeBloom(): Bloom {\r\n    return {\r\n        enabled: false,\r\n        material: null,\r\n        enableAlphaMask: false,\r\n        iterations: 3,\r\n        threshold: 0.8,\r\n        intensity: 2.3,\r\n    };\r\n}\r\n\r\nexport function fillRequiredBloom(value: Bloom): void {\r\n    if (value.enabled === undefined) {\r\n        value.enabled = false;\r\n    }\r\n    if (value.material === undefined) {\r\n        value.material = null;\r\n    }\r\n    if (value.enableAlphaMask === undefined) {\r\n        value.enableAlphaMask = false;\r\n    }\r\n    if (value.iterations === undefined) {\r\n        value.iterations = 3;\r\n    }\r\n    if (value.threshold === undefined) {\r\n        value.threshold = 0.8;\r\n    }\r\n    if (value.intensity === undefined) {\r\n        value.intensity = 2.3;\r\n    }\r\n}\r\n\r\nexport interface ColorGrading {\r\n    enabled: boolean; /* false */\r\n    /* refcount */ material: Material | null;\r\n    contribute: number; /* 1 */\r\n    /* refcount */ colorGradingMap: Texture2D | null;\r\n    [name: string]: unknown;\r\n}\r\n\r\nexport function makeColorGrading(): ColorGrading {\r\n    return {\r\n        enabled: false,\r\n        material: null,\r\n        contribute: 1,\r\n        colorGradingMap: null,\r\n    };\r\n}\r\n\r\nexport function fillRequiredColorGrading(value: ColorGrading): void {\r\n    if (value.enabled === undefined) {\r\n        value.enabled = false;\r\n    }\r\n    if (value.material === undefined) {\r\n        value.material = null;\r\n    }\r\n    if (value.contribute === undefined) {\r\n        value.contribute = 1;\r\n    }\r\n    if (value.colorGradingMap === undefined) {\r\n        value.colorGradingMap = null;\r\n    }\r\n}\r\n\r\nexport interface FSR {\r\n    enabled: boolean; /* false */\r\n    /* refcount */ material: Material | null;\r\n    sharpness: number; /* 0.8 */\r\n    [name: string]: unknown;\r\n}\r\n\r\nexport function makeFSR(): FSR {\r\n    return {\r\n        enabled: false,\r\n        material: null,\r\n        sharpness: 0.8,\r\n    };\r\n}\r\n\r\nexport function fillRequiredFSR(value: FSR): void {\r\n    if (value.enabled === undefined) {\r\n        value.enabled = false;\r\n    }\r\n    if (value.material === undefined) {\r\n        value.material = null;\r\n    }\r\n    if (value.sharpness === undefined) {\r\n        value.sharpness = 0.8;\r\n    }\r\n}\r\n\r\nexport interface FXAA {\r\n    enabled: boolean; /* false */\r\n    /* refcount */ material: Material | null;\r\n    [name: string]: unknown;\r\n}\r\n\r\nexport function makeFXAA(): FXAA {\r\n    return {\r\n        enabled: false,\r\n        material: null,\r\n    };\r\n}\r\n\r\nexport function fillRequiredFXAA(value: FXAA): void {\r\n    if (value.enabled === undefined) {\r\n        value.enabled = false;\r\n    }\r\n    if (value.material === undefined) {\r\n        value.material = null;\r\n    }\r\n}\r\n\r\nexport interface ToneMapping {\r\n    /* refcount */ material: Material | null;\r\n    [name: string]: unknown;\r\n}\r\n\r\nexport function makeToneMapping(): ToneMapping {\r\n    return {\r\n        material: null,\r\n    };\r\n}\r\n\r\nexport function fillRequiredToneMapping(value: ToneMapping): void {\r\n    if (value.material === undefined) {\r\n        value.material = null;\r\n    }\r\n}\r\n\r\nexport interface PipelineSettings {\r\n    readonly msaa: MSAA;\r\n    enableShadingScale: boolean; /* false */\r\n    shadingScale: number; /* 0.5 */\r\n    readonly bloom: Bloom;\r\n    readonly toneMapping: ToneMapping;\r\n    readonly colorGrading: ColorGrading;\r\n    readonly fsr: FSR;\r\n    readonly fxaa: FXAA;\r\n    [name: string]: unknown;\r\n}\r\n\r\nexport function makePipelineSettings(): PipelineSettings {\r\n    return {\r\n        msaa: makeMSAA(),\r\n        enableShadingScale: false,\r\n        shadingScale: 0.5,\r\n        bloom: makeBloom(),\r\n        toneMapping: makeToneMapping(),\r\n        colorGrading: makeColorGrading(),\r\n        fsr: makeFSR(),\r\n        fxaa: makeFXAA(),\r\n    };\r\n}\r\n\r\nexport function fillRequiredPipelineSettings(value: PipelineSettings): void {\r\n    if (!value.msaa) {\r\n        (value.msaa as MSAA) = makeMSAA();\r\n    } else {\r\n        fillRequiredMSAA(value.msaa);\r\n    }\r\n    if (value.enableShadingScale === undefined) {\r\n        value.enableShadingScale = false;\r\n    }\r\n    if (value.shadingScale === undefined) {\r\n        value.shadingScale = 0.5;\r\n    }\r\n    if (!value.bloom) {\r\n        (value.bloom as Bloom) = makeBloom();\r\n    } else {\r\n        fillRequiredBloom(value.bloom);\r\n    }\r\n    if (!value.toneMapping) {\r\n        (value.toneMapping as ToneMapping) = makeToneMapping();\r\n    } else {\r\n        fillRequiredToneMapping(value.toneMapping);\r\n    }\r\n    if (!value.colorGrading) {\r\n        (value.colorGrading as ColorGrading) = makeColorGrading();\r\n    } else {\r\n        fillRequiredColorGrading(value.colorGrading);\r\n    }\r\n    if (!value.fsr) {\r\n        (value.fsr as FSR) = makeFSR();\r\n    } else {\r\n        fillRequiredFSR(value.fsr);\r\n    }\r\n    if (!value.fxaa) {\r\n        (value.fxaa as FXAA) = makeFXAA();\r\n    } else {\r\n        fillRequiredFXAA(value.fxaa);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2021-2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    assert, cclegacy, clamp, geometry, gfx, Layers, Material, pipeline,\r\n    PipelineEventProcessor, PipelineEventType, ReflectionProbeManager, renderer,\r\n    rendering, sys, Vec2, Vec3, Vec4, warn,\r\n} from 'cc';\r\n\r\nimport { DEBUG, EDITOR } from 'cc/env';\r\n\r\nimport {\r\n    makePipelineSettings,\r\n    PipelineSettings,\r\n} from './builtin-pipeline-types';\r\n\r\nconst { AABB, Sphere, intersect } = geometry;\r\nconst { ClearFlagBit, Color, Format, FormatFeatureBit, LoadOp, StoreOp, TextureType, Viewport } = gfx;\r\nconst { scene } = renderer;\r\nconst { CameraUsage, CSMLevel, LightType } = scene;\r\n\r\nfunction forwardNeedClearColor(camera: renderer.scene.Camera): boolean {\r\n    return !!(camera.clearFlag & (ClearFlagBit.COLOR | (ClearFlagBit.STENCIL << 1)));\r\n}\r\n\r\nfunction getCsmMainLightViewport(\r\n    light: renderer.scene.DirectionalLight,\r\n    w: number,\r\n    h: number,\r\n    level: number,\r\n    vp: gfx.Viewport,\r\n    screenSpaceSignY: number,\r\n): void {\r\n    if (light.shadowFixedArea || light.csmLevel === CSMLevel.LEVEL_1) {\r\n        vp.left = 0;\r\n        vp.top = 0;\r\n        vp.width = Math.trunc(w);\r\n        vp.height = Math.trunc(h);\r\n    } else {\r\n        vp.left = Math.trunc(level % 2 * 0.5 * w);\r\n        if (screenSpaceSignY > 0) {\r\n            vp.top = Math.trunc((1 - Math.floor(level / 2)) * 0.5 * h);\r\n        } else {\r\n            vp.top = Math.trunc(Math.floor(level / 2) * 0.5 * h);\r\n        }\r\n        vp.width = Math.trunc(0.5 * w);\r\n        vp.height = Math.trunc(0.5 * h);\r\n    }\r\n    vp.left = Math.max(0, vp.left);\r\n    vp.top = Math.max(0, vp.top);\r\n    vp.width = Math.max(1, vp.width);\r\n    vp.height = Math.max(1, vp.height);\r\n}\r\n\r\nexport class PipelineConfigs {\r\n    isWeb = false;\r\n    isWebGL1 = false;\r\n    isWebGPU = false;\r\n    isMobile = false;\r\n    isHDR = false;\r\n    useFloatOutput = false;\r\n    toneMappingType = 0; // 0: ACES, 1: None\r\n    shadowEnabled = false;\r\n    shadowMapFormat = Format.R32F;\r\n    shadowMapSize = new Vec2(1, 1);\r\n    usePlanarShadow = false;\r\n    screenSpaceSignY = 1;\r\n    supportDepthSample = false;\r\n    mobileMaxSpotLightShadowMaps = 1;\r\n\r\n    platform = new Vec4(0, 0, 0, 0);\r\n}\r\n\r\nfunction setupPipelineConfigs(\r\n    ppl: rendering.BasicPipeline,\r\n    configs: PipelineConfigs,\r\n): void {\r\n    const sampleFeature = FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.LINEAR_FILTER;\r\n    const device = ppl.device;\r\n    // Platform\r\n    configs.isWeb = !sys.isNative;\r\n    configs.isWebGL1 = device.gfxAPI === gfx.API.WEBGL;\r\n    configs.isWebGPU = device.gfxAPI === gfx.API.WEBGPU;\r\n    configs.isMobile = sys.isMobile;\r\n\r\n    // Rendering\r\n    configs.isHDR = ppl.pipelineSceneData.isHDR; // Has tone mapping\r\n    configs.useFloatOutput = ppl.getMacroBool('CC_USE_FLOAT_OUTPUT');\r\n    configs.toneMappingType = ppl.pipelineSceneData.postSettings.toneMappingType;\r\n    // Shadow\r\n    const shadowInfo = ppl.pipelineSceneData.shadows;\r\n    configs.shadowEnabled = shadowInfo.enabled;\r\n    configs.shadowMapFormat = pipeline.supportsR32FloatTexture(ppl.device) ? Format.R32F : Format.RGBA8;\r\n    configs.shadowMapSize.set(shadowInfo.size);\r\n    configs.usePlanarShadow = shadowInfo.enabled && shadowInfo.type === renderer.scene.ShadowType.Planar;\r\n    // Device\r\n    configs.screenSpaceSignY = ppl.device.capabilities.screenSpaceSignY;\r\n    configs.supportDepthSample = (ppl.device.getFormatFeatures(Format.DEPTH_STENCIL) & sampleFeature) === sampleFeature;\r\n    // Constants\r\n    const screenSpaceSignY = device.capabilities.screenSpaceSignY;\r\n    configs.platform.x = configs.isMobile ? 1.0 : 0.0;\r\n    configs.platform.w = (screenSpaceSignY * 0.5 + 0.5) << 1 | (device.capabilities.clipSpaceSignY * 0.5 + 0.5);\r\n}\r\n\r\nexport interface PipelineSettings2 extends PipelineSettings {\r\n    _passes?: rendering.PipelinePassBuilder[];\r\n}\r\n\r\nconst defaultSettings = makePipelineSettings();\r\n\r\nexport class CameraConfigs {\r\n    settings: PipelineSettings = defaultSettings;\r\n    // Window\r\n    isMainGameWindow = false;\r\n    renderWindowId = 0;\r\n    // Camera\r\n    colorName = '';\r\n    depthStencilName = '';\r\n    // Pipeline\r\n    enableFullPipeline = false;\r\n    enableProfiler = false;\r\n    remainingPasses = 0;\r\n    // Shading Scale\r\n    enableShadingScale = false;\r\n    shadingScale = 1.0;\r\n    nativeWidth = 1;\r\n    nativeHeight = 1;\r\n    width = 1; // Scaled width\r\n    height = 1; // Scaled height\r\n    // Radiance\r\n    enableHDR = false;\r\n    radianceFormat = gfx.Format.RGBA8;\r\n    // Tone Mapping\r\n    copyAndTonemapMaterial: Material | null = null;\r\n    // Depth\r\n    /** @en mutable */\r\n    enableStoreSceneDepth = false;\r\n}\r\n\r\nconst sClearColorTransparentBlack = new Color(0, 0, 0, 0);\r\n\r\nfunction sortPipelinePassBuildersByConfigOrder(passBuilders: rendering.PipelinePassBuilder[]): void {\r\n    passBuilders.sort((a, b) => {\r\n        return a.getConfigOrder() - b.getConfigOrder();\r\n    });\r\n}\r\n\r\nfunction sortPipelinePassBuildersByRenderOrder(passBuilders: rendering.PipelinePassBuilder[]): void {\r\n    passBuilders.sort((a, b) => {\r\n        return a.getRenderOrder() - b.getRenderOrder();\r\n    });\r\n}\r\n\r\nfunction addCopyToScreenPass(\r\n    ppl: rendering.BasicPipeline,\r\n    pplConfigs: Readonly<PipelineConfigs>,\r\n    cameraConfigs: CameraConfigs,\r\n    input: string,\r\n): rendering.BasicRenderPassBuilder {\r\n    assert(!!cameraConfigs.copyAndTonemapMaterial);\r\n    const pass = ppl.addRenderPass(\r\n        cameraConfigs.nativeWidth,\r\n        cameraConfigs.nativeHeight,\r\n        'cc-tone-mapping');\r\n    pass.addRenderTarget(\r\n        cameraConfigs.colorName,\r\n        LoadOp.CLEAR, StoreOp.STORE,\r\n        sClearColorTransparentBlack);\r\n    pass.addTexture(input, 'inputTexture');\r\n    pass.setVec4('g_platform', pplConfigs.platform);\r\n    pass.addQueue(rendering.QueueHint.OPAQUE)\r\n        .addFullscreenQuad(cameraConfigs.copyAndTonemapMaterial, 1);\r\n    return pass;\r\n}\r\n\r\nexport function getPingPongRenderTarget(prevName: string, prefix: string, id: number): string {\r\n    if (prevName.startsWith(prefix)) {\r\n        return `${prefix}${1 - Number(prevName.charAt(prefix.length))}_${id}`;\r\n    } else {\r\n        return `${prefix}0_${id}`;\r\n    }\r\n}\r\n\r\nexport interface PipelineContext {\r\n    colorName: string;\r\n    depthStencilName: string;\r\n}\r\n\r\nclass ForwardLighting {\r\n    // Active lights\r\n    private readonly lights: renderer.scene.Light[] = [];\r\n    // Active spot lights with shadows (Mutually exclusive with `lights`)\r\n    private readonly shadowEnabledSpotLights: renderer.scene.SpotLight[] = [];\r\n\r\n    // Internal cached resources\r\n    private readonly _sphere = Sphere.create(0, 0, 0, 1);\r\n    private readonly _boundingBox = new AABB();\r\n    private readonly _rangedDirLightBoundingBox = new AABB(0.0, 0.0, 0.0, 0.5, 0.5, 0.5);\r\n\r\n    // ----------------------------------------------------------------\r\n    // Interface\r\n    // ----------------------------------------------------------------\r\n    public cullLights(scene: renderer.RenderScene, frustum: geometry.Frustum, cameraPos?: Vec3): void {\r\n        // TODO(zhouzhenglong): Make light culling native\r\n        this.lights.length = 0;\r\n        this.shadowEnabledSpotLights.length = 0;\r\n        // spot lights\r\n        for (const light of scene.spotLights) {\r\n            if (light.baked) {\r\n                continue;\r\n            }\r\n            Sphere.set(this._sphere, light.position.x, light.position.y, light.position.z, light.range);\r\n            if (intersect.sphereFrustum(this._sphere, frustum)) {\r\n                if (light.shadowEnabled) {\r\n                    this.shadowEnabledSpotLights.push(light);\r\n                } else {\r\n                    this.lights.push(light);\r\n                }\r\n            }\r\n        }\r\n        // sphere lights\r\n        for (const light of scene.sphereLights) {\r\n            if (light.baked) {\r\n                continue;\r\n            }\r\n            Sphere.set(this._sphere, light.position.x, light.position.y, light.position.z, light.range);\r\n            if (intersect.sphereFrustum(this._sphere, frustum)) {\r\n                this.lights.push(light);\r\n            }\r\n        }\r\n        // point lights\r\n        for (const light of scene.pointLights) {\r\n            if (light.baked) {\r\n                continue;\r\n            }\r\n            Sphere.set(this._sphere, light.position.x, light.position.y, light.position.z, light.range);\r\n            if (intersect.sphereFrustum(this._sphere, frustum)) {\r\n                this.lights.push(light);\r\n            }\r\n        }\r\n        // ranged dir lights\r\n        for (const light of scene.rangedDirLights) {\r\n            AABB.transform(this._boundingBox, this._rangedDirLightBoundingBox, light.node!.getWorldMatrix());\r\n            if (intersect.aabbFrustum(this._boundingBox, frustum)) {\r\n                this.lights.push(light);\r\n            }\r\n        }\r\n\r\n        if (cameraPos) {\r\n            this.shadowEnabledSpotLights.sort(\r\n                (lhs, rhs) => Vec3.squaredDistance(cameraPos, lhs.position) - Vec3.squaredDistance(cameraPos, rhs.position),\r\n            );\r\n        }\r\n    }\r\n    private _addLightQueues(camera: renderer.scene.Camera, pass: rendering.BasicRenderPassBuilder): void {\r\n        for (const light of this.lights) {\r\n            const queue = pass.addQueue(rendering.QueueHint.BLEND, 'forward-add');\r\n            switch (light.type) {\r\n                case LightType.SPHERE:\r\n                    queue.name = 'sphere-light';\r\n                    break;\r\n                case LightType.SPOT:\r\n                    queue.name = 'spot-light';\r\n                    break;\r\n                case LightType.POINT:\r\n                    queue.name = 'point-light';\r\n                    break;\r\n                case LightType.RANGED_DIRECTIONAL:\r\n                    queue.name = 'ranged-directional-light';\r\n                    break;\r\n                default:\r\n                    queue.name = 'unknown-light';\r\n            }\r\n            queue.addScene(\r\n                camera,\r\n                rendering.SceneFlags.BLEND,\r\n                light,\r\n            );\r\n        }\r\n    }\r\n    public addSpotlightShadowPasses(\r\n        ppl: rendering.BasicPipeline,\r\n        camera: renderer.scene.Camera,\r\n        maxNumShadowMaps: number,\r\n    ): void {\r\n        let i = 0;\r\n        for (const light of this.shadowEnabledSpotLights) {\r\n            const shadowMapSize = ppl.pipelineSceneData.shadows.size;\r\n            const shadowPass = ppl.addRenderPass(shadowMapSize.x, shadowMapSize.y, 'default');\r\n            shadowPass.name = `SpotLightShadowPass${i}`;\r\n            shadowPass.addRenderTarget(`SpotShadowMap${i}`, LoadOp.CLEAR, StoreOp.STORE, new Color(1, 1, 1, 1));\r\n            shadowPass.addDepthStencil(`SpotShadowDepth${i}`, LoadOp.CLEAR, StoreOp.DISCARD);\r\n            shadowPass.addQueue(rendering.QueueHint.NONE, 'shadow-caster')\r\n                .addScene(camera, rendering.SceneFlags.OPAQUE | rendering.SceneFlags.MASK | rendering.SceneFlags.SHADOW_CASTER)\r\n                .useLightFrustum(light);\r\n            ++i;\r\n            if (i >= maxNumShadowMaps) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    public addLightQueues(pass: rendering.BasicRenderPassBuilder,\r\n        camera: renderer.scene.Camera, maxNumShadowMaps: number): void {\r\n        this._addLightQueues(camera, pass);\r\n        let i = 0;\r\n        for (const light of this.shadowEnabledSpotLights) {\r\n            // Add spot-light pass\r\n            // Save last RenderPass to the `pass` variable\r\n            // TODO(zhouzhenglong): Fix per queue addTexture\r\n            pass.addTexture(`SpotShadowMap${i}`, 'cc_spotShadowMap');\r\n            const queue = pass.addQueue(rendering.QueueHint.BLEND, 'forward-add');\r\n            queue.addScene(camera, rendering.SceneFlags.BLEND, light);\r\n            ++i;\r\n            if (i >= maxNumShadowMaps) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Notice: ForwardLighting cannot handle a lot of lights.\r\n    // If there are too many lights, the performance will be very poor.\r\n    // If many lights are needed, please implement a forward+ or deferred rendering pipeline.\r\n    public addLightPasses(\r\n        colorName: string,\r\n        depthStencilName: string,\r\n        depthStencilStoreOp: gfx.StoreOp,\r\n        id: number, // window id\r\n        width: number,\r\n        height: number,\r\n        camera: renderer.scene.Camera,\r\n        viewport: gfx.Viewport,\r\n        ppl: rendering.BasicPipeline,\r\n        pass: rendering.BasicRenderPassBuilder,\r\n    ): rendering.BasicRenderPassBuilder {\r\n        this._addLightQueues(camera, pass);\r\n\r\n        let count = 0;\r\n        const shadowMapSize = ppl.pipelineSceneData.shadows.size;\r\n        for (const light of this.shadowEnabledSpotLights) {\r\n            const shadowPass = ppl.addRenderPass(shadowMapSize.x, shadowMapSize.y, 'default');\r\n            shadowPass.name = 'SpotlightShadowPass';\r\n            // Reuse csm shadow map\r\n            shadowPass.addRenderTarget(`ShadowMap${id}`, LoadOp.CLEAR, StoreOp.STORE, new Color(1, 1, 1, 1));\r\n            shadowPass.addDepthStencil(`ShadowDepth${id}`, LoadOp.CLEAR, StoreOp.DISCARD);\r\n            shadowPass.addQueue(rendering.QueueHint.NONE, 'shadow-caster')\r\n                .addScene(camera, rendering.SceneFlags.OPAQUE | rendering.SceneFlags.MASK | rendering.SceneFlags.SHADOW_CASTER)\r\n                .useLightFrustum(light);\r\n\r\n            // Add spot-light pass\r\n            // Save last RenderPass to the `pass` variable\r\n            ++count;\r\n            const storeOp = count === this.shadowEnabledSpotLights.length\r\n                ? depthStencilStoreOp\r\n                : StoreOp.STORE;\r\n\r\n            pass = ppl.addRenderPass(width, height, 'default');\r\n            pass.name = 'SpotlightWithShadowMap';\r\n            pass.setViewport(viewport);\r\n            pass.addRenderTarget(colorName, LoadOp.LOAD);\r\n            pass.addDepthStencil(depthStencilName, LoadOp.LOAD, storeOp);\r\n            pass.addTexture(`ShadowMap${id}`, 'cc_spotShadowMap');\r\n            const queue = pass.addQueue(rendering.QueueHint.BLEND, 'forward-add');\r\n            queue.addScene(\r\n                camera,\r\n                rendering.SceneFlags.BLEND,\r\n                light,\r\n            );\r\n        }\r\n        return pass;\r\n    }\r\n\r\n    public isMultipleLightPassesNeeded(): boolean {\r\n        return this.shadowEnabledSpotLights.length > 0;\r\n    }\r\n}\r\n\r\nexport interface ForwardPassConfigs {\r\n    enableMainLightShadowMap: boolean;\r\n    enableMainLightPlanarShadowMap: boolean;\r\n    enablePlanarReflectionProbe: boolean;\r\n    enableMSAA: boolean;\r\n    enableSingleForwardPass: boolean;\r\n}\r\n\r\nexport class BuiltinForwardPassBuilder implements rendering.PipelinePassBuilder {\r\n    static ConfigOrder = 100;\r\n    static RenderOrder = 100;\r\n    getConfigOrder(): number {\r\n        return BuiltinForwardPassBuilder.ConfigOrder;\r\n    }\r\n    getRenderOrder(): number {\r\n        return BuiltinForwardPassBuilder.RenderOrder;\r\n    }\r\n    configCamera(\r\n        camera: Readonly<renderer.scene.Camera>,\r\n        pipelineConfigs: Readonly<PipelineConfigs>,\r\n        cameraConfigs: CameraConfigs & ForwardPassConfigs): void {\r\n        // Shadow\r\n        cameraConfigs.enableMainLightShadowMap = pipelineConfigs.shadowEnabled\r\n            && !pipelineConfigs.usePlanarShadow\r\n            && !!camera.scene\r\n            && !!camera.scene.mainLight\r\n            && camera.scene.mainLight.shadowEnabled;\r\n\r\n        cameraConfigs.enableMainLightPlanarShadowMap = pipelineConfigs.shadowEnabled\r\n            && pipelineConfigs.usePlanarShadow\r\n            && !!camera.scene\r\n            && !!camera.scene.mainLight\r\n            && camera.scene.mainLight.shadowEnabled;\r\n\r\n        // Reflection Probe\r\n        cameraConfigs.enablePlanarReflectionProbe = cameraConfigs.isMainGameWindow\r\n            || camera.cameraUsage === CameraUsage.SCENE_VIEW\r\n            || camera.cameraUsage === CameraUsage.GAME_VIEW;\r\n\r\n        // MSAA\r\n        cameraConfigs.enableMSAA = cameraConfigs.settings.msaa.enabled\r\n            && !cameraConfigs.enableStoreSceneDepth // Cannot store MS depth, resolve depth is also not cross-platform\r\n            && !pipelineConfigs.isWeb // TODO(zhouzhenglong): remove this constraint\r\n            && !pipelineConfigs.isWebGL1;\r\n\r\n        // Forward rendering (Depend on MSAA and TBR)\r\n        cameraConfigs.enableSingleForwardPass\r\n            = pipelineConfigs.isMobile || cameraConfigs.enableMSAA;\r\n\r\n        ++cameraConfigs.remainingPasses;\r\n    }\r\n    windowResize(\r\n        ppl: rendering.BasicPipeline,\r\n        pplConfigs: Readonly<PipelineConfigs>,\r\n        cameraConfigs: Readonly<CameraConfigs & ForwardPassConfigs>,\r\n        window: renderer.RenderWindow,\r\n        camera: renderer.scene.Camera,\r\n        nativeWidth: number,\r\n        nativeHeight: number): void {\r\n        const ResourceFlags = rendering.ResourceFlags;\r\n        const ResourceResidency = rendering.ResourceResidency;\r\n        const id = window.renderWindowId;\r\n        const settings = cameraConfigs.settings;\r\n\r\n        const width = cameraConfigs.enableShadingScale\r\n            ? Math.max(Math.floor(nativeWidth * cameraConfigs.shadingScale), 1)\r\n            : nativeWidth;\r\n        const height = cameraConfigs.enableShadingScale\r\n            ? Math.max(Math.floor(nativeHeight * cameraConfigs.shadingScale), 1)\r\n            : nativeHeight;\r\n\r\n        // MsaaRadiance\r\n        if (cameraConfigs.enableMSAA) {\r\n            // Notice: We never store multisample results.\r\n            // These samples are always resolved and discarded at the end of the render pass.\r\n            // So the ResourceResidency should be MEMORYLESS.\r\n            if (cameraConfigs.enableHDR) {\r\n                ppl.addTexture(`MsaaRadiance${id}`, TextureType.TEX2D, cameraConfigs.radianceFormat, width, height, 1, 1, 1,\r\n                    settings.msaa.sampleCount, ResourceFlags.COLOR_ATTACHMENT, ResourceResidency.MEMORYLESS);\r\n            } else {\r\n                ppl.addTexture(`MsaaRadiance${id}`, TextureType.TEX2D, Format.RGBA8, width, height, 1, 1, 1,\r\n                    settings.msaa.sampleCount, ResourceFlags.COLOR_ATTACHMENT, ResourceResidency.MEMORYLESS);\r\n            }\r\n            ppl.addTexture(`MsaaDepthStencil${id}`, TextureType.TEX2D, Format.DEPTH_STENCIL, width, height, 1, 1, 1,\r\n                settings.msaa.sampleCount, ResourceFlags.DEPTH_STENCIL_ATTACHMENT, ResourceResidency.MEMORYLESS);\r\n        }\r\n\r\n        // Mainlight ShadowMap\r\n        ppl.addRenderTarget(\r\n            `ShadowMap${id}`,\r\n            pplConfigs.shadowMapFormat,\r\n            pplConfigs.shadowMapSize.x,\r\n            pplConfigs.shadowMapSize.y,\r\n        );\r\n        ppl.addDepthStencil(\r\n            `ShadowDepth${id}`,\r\n            Format.DEPTH_STENCIL,\r\n            pplConfigs.shadowMapSize.x,\r\n            pplConfigs.shadowMapSize.y,\r\n        );\r\n\r\n        // Spot-light shadow maps\r\n        if (cameraConfigs.enableSingleForwardPass) {\r\n            const count = pplConfigs.mobileMaxSpotLightShadowMaps;\r\n            for (let i = 0; i !== count; ++i) {\r\n                ppl.addRenderTarget(\r\n                    `SpotShadowMap${i}`,\r\n                    pplConfigs.shadowMapFormat,\r\n                    pplConfigs.shadowMapSize.x,\r\n                    pplConfigs.shadowMapSize.y,\r\n                );\r\n                ppl.addDepthStencil(\r\n                    `SpotShadowDepth${i}`,\r\n                    Format.DEPTH_STENCIL,\r\n                    pplConfigs.shadowMapSize.x,\r\n                    pplConfigs.shadowMapSize.y,\r\n                );\r\n            }\r\n        }\r\n    }\r\n    setup(\r\n        ppl: rendering.BasicPipeline,\r\n        pplConfigs: Readonly<PipelineConfigs>,\r\n        cameraConfigs: CameraConfigs & ForwardPassConfigs,\r\n        camera: renderer.scene.Camera,\r\n        context: PipelineContext): rendering.BasicRenderPassBuilder | undefined {\r\n        const id = camera.window.renderWindowId;\r\n\r\n        const scene = camera.scene!;\r\n        const mainLight = scene.mainLight;\r\n\r\n        --cameraConfigs.remainingPasses;\r\n        assert(cameraConfigs.remainingPasses >= 0);\r\n\r\n        // Forward Lighting (Light Culling)\r\n        this.forwardLighting.cullLights(scene, camera.frustum);\r\n\r\n        // Main Directional light CSM Shadow Map\r\n        if (cameraConfigs.enableMainLightShadowMap) {\r\n            assert(!!mainLight);\r\n            this._addCascadedShadowMapPass(ppl, pplConfigs, id, mainLight, camera);\r\n        }\r\n\r\n        // Spot light shadow maps (Mobile or MSAA)\r\n        if (cameraConfigs.enableSingleForwardPass) {\r\n            // Currently, only support 1 spot light with shadow map on mobile platform.\r\n            // TODO(zhouzhenglong): Relex this limitation.\r\n            this.forwardLighting.addSpotlightShadowPasses(\r\n                ppl, camera, pplConfigs.mobileMaxSpotLightShadowMaps);\r\n        }\r\n\r\n        this._tryAddReflectionProbePasses(ppl, cameraConfigs, id, mainLight, camera.scene);\r\n\r\n        if (cameraConfigs.remainingPasses > 0 || cameraConfigs.enableShadingScale) {\r\n            context.colorName = cameraConfigs.enableShadingScale\r\n                ? `ScaledRadiance0_${id}`\r\n                : `Radiance0_${id}`;\r\n            context.depthStencilName = cameraConfigs.enableShadingScale\r\n                ? `ScaledSceneDepth_${id}`\r\n                : `SceneDepth_${id}`;\r\n        } else {\r\n            context.colorName = cameraConfigs.colorName;\r\n            context.depthStencilName = cameraConfigs.depthStencilName;\r\n        }\r\n\r\n        const pass = this._addForwardRadiancePasses(\r\n            ppl, pplConfigs, cameraConfigs, id, camera,\r\n            cameraConfigs.width, cameraConfigs.height, mainLight,\r\n            context.colorName, context.depthStencilName,\r\n            !cameraConfigs.enableMSAA,\r\n            cameraConfigs.enableStoreSceneDepth ? StoreOp.STORE : StoreOp.DISCARD);\r\n\r\n        if (!cameraConfigs.enableStoreSceneDepth) {\r\n            context.depthStencilName = '';\r\n        }\r\n\r\n        if (cameraConfigs.remainingPasses === 0 && cameraConfigs.enableShadingScale) {\r\n            return addCopyToScreenPass(ppl, pplConfigs, cameraConfigs, context.colorName);\r\n        } else {\r\n            return pass;\r\n        }\r\n    }\r\n    private _addCascadedShadowMapPass(\r\n        ppl: rendering.BasicPipeline,\r\n        pplConfigs: Readonly<PipelineConfigs>,\r\n        id: number,\r\n        light: renderer.scene.DirectionalLight,\r\n        camera: renderer.scene.Camera,\r\n    ): void {\r\n        const QueueHint = rendering.QueueHint;\r\n        const SceneFlags = rendering.SceneFlags;\r\n        // ----------------------------------------------------------------\r\n        // Dynamic states\r\n        // ----------------------------------------------------------------\r\n        const shadowSize = ppl.pipelineSceneData.shadows.size;\r\n        const width = shadowSize.x;\r\n        const height = shadowSize.y;\r\n\r\n        const viewport = this._viewport;\r\n        viewport.left = viewport.top = 0;\r\n        viewport.width = width;\r\n        viewport.height = height;\r\n\r\n        // ----------------------------------------------------------------\r\n        // CSM Shadow Map\r\n        // ----------------------------------------------------------------\r\n        const pass = ppl.addRenderPass(width, height, 'default');\r\n        pass.name = 'CascadedShadowMap';\r\n        pass.addRenderTarget(`ShadowMap${id}`, LoadOp.CLEAR, StoreOp.STORE, new Color(1, 1, 1, 1));\r\n        pass.addDepthStencil(`ShadowDepth${id}`, LoadOp.CLEAR, StoreOp.DISCARD);\r\n        const csmLevel = ppl.pipelineSceneData.csmSupported ? light.csmLevel : 1;\r\n\r\n        // Add shadow map viewports\r\n        for (let level = 0; level !== csmLevel; ++level) {\r\n            getCsmMainLightViewport(light, width, height, level, this._viewport, pplConfigs.screenSpaceSignY);\r\n            const queue = pass.addQueue(QueueHint.NONE, 'shadow-caster');\r\n            if (!pplConfigs.isWebGPU) { // Temporary workaround for WebGPU\r\n                queue.setViewport(this._viewport);\r\n            }\r\n            queue\r\n                .addScene(camera, SceneFlags.OPAQUE | SceneFlags.MASK | SceneFlags.SHADOW_CASTER)\r\n                .useLightFrustum(light, level);\r\n        }\r\n    }\r\n    private _tryAddReflectionProbePasses(\r\n        ppl: rendering.BasicPipeline,\r\n        cameraConfigs: Readonly<CameraConfigs & ForwardPassConfigs>,\r\n        id: number,\r\n        mainLight: renderer.scene.DirectionalLight | null,\r\n        scene: renderer.RenderScene | null,\r\n    ): void {\r\n        const reflectionProbeManager = cclegacy.internal.reflectionProbeManager as ReflectionProbeManager | undefined;\r\n        if (!reflectionProbeManager) {\r\n            return;\r\n        }\r\n        const ResourceResidency = rendering.ResourceResidency;\r\n        const probes = reflectionProbeManager.getProbes();\r\n        const maxProbeCount = 4;\r\n        let probeID = 0;\r\n        for (const probe of probes) {\r\n            if (!probe.needRender) {\r\n                continue;\r\n            }\r\n            const area = probe.renderArea();\r\n            const width = Math.max(Math.floor(area.x), 1);\r\n            const height = Math.max(Math.floor(area.y), 1);\r\n\r\n            if (probe.probeType === renderer.scene.ProbeType.PLANAR) {\r\n                if (!cameraConfigs.enablePlanarReflectionProbe) {\r\n                    continue;\r\n                }\r\n                const window: renderer.RenderWindow = probe.realtimePlanarTexture!.window!;\r\n                const colorName = `PlanarProbeRT${probeID}`;\r\n                const depthStencilName = `PlanarProbeDS${probeID}`;\r\n                // ProbeResource\r\n                ppl.addRenderWindow(colorName,\r\n                    cameraConfigs.radianceFormat, width, height, window);\r\n                ppl.addDepthStencil(depthStencilName,\r\n                    gfx.Format.DEPTH_STENCIL, width, height, ResourceResidency.MEMORYLESS);\r\n\r\n                // Rendering\r\n                const probePass = ppl.addRenderPass(width, height, 'default');\r\n                probePass.name = `PlanarReflectionProbe${probeID}`;\r\n                this._buildReflectionProbePass(probePass, cameraConfigs, id, probe.camera,\r\n                    colorName, depthStencilName, mainLight, scene);\r\n            } else if (EDITOR) {\r\n                for (let faceIdx = 0; faceIdx < probe.bakedCubeTextures.length; faceIdx++) {\r\n                    probe.updateCameraDir(faceIdx);\r\n                    const window: renderer.RenderWindow = probe.bakedCubeTextures[faceIdx].window!;\r\n                    const colorName = `CubeProbeRT${probeID}${faceIdx}`;\r\n                    const depthStencilName = `CubeProbeDS${probeID}${faceIdx}`;\r\n                    // ProbeResource\r\n                    ppl.addRenderWindow(colorName,\r\n                        cameraConfigs.radianceFormat, width, height, window);\r\n                    ppl.addDepthStencil(depthStencilName,\r\n                        gfx.Format.DEPTH_STENCIL, width, height, ResourceResidency.MEMORYLESS);\r\n\r\n                    // Rendering\r\n                    const probePass = ppl.addRenderPass(width, height, 'default');\r\n                    probePass.name = `CubeProbe${probeID}${faceIdx}`;\r\n                    this._buildReflectionProbePass(probePass, cameraConfigs, id, probe.camera,\r\n                        colorName, depthStencilName, mainLight, scene);\r\n                }\r\n                probe.needRender = false;\r\n            }\r\n            ++probeID;\r\n            if (probeID === maxProbeCount) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    private _buildReflectionProbePass(\r\n        pass: rendering.BasicRenderPassBuilder,\r\n        cameraConfigs: Readonly<CameraConfigs & ForwardPassConfigs>,\r\n        id: number,\r\n        camera: renderer.scene.Camera,\r\n        colorName: string,\r\n        depthStencilName: string,\r\n        mainLight: renderer.scene.DirectionalLight | null,\r\n        scene: renderer.RenderScene | null = null,\r\n    ): void {\r\n        const QueueHint = rendering.QueueHint;\r\n        const SceneFlags = rendering.SceneFlags;\r\n        // set viewport\r\n        const colorStoreOp = cameraConfigs.enableMSAA ? StoreOp.DISCARD : StoreOp.STORE;\r\n\r\n        // bind output render target\r\n        if (forwardNeedClearColor(camera)) {\r\n            this._reflectionProbeClearColor.x = camera.clearColor.x;\r\n            this._reflectionProbeClearColor.y = camera.clearColor.y;\r\n            this._reflectionProbeClearColor.z = camera.clearColor.z;\r\n            const clearColor = rendering.packRGBE(this._reflectionProbeClearColor);\r\n            this._clearColor.x = clearColor.x;\r\n            this._clearColor.y = clearColor.y;\r\n            this._clearColor.z = clearColor.z;\r\n            this._clearColor.w = clearColor.w;\r\n            pass.addRenderTarget(colorName, LoadOp.CLEAR, colorStoreOp, this._clearColor);\r\n        } else {\r\n            pass.addRenderTarget(colorName, LoadOp.LOAD, colorStoreOp);\r\n        }\r\n\r\n        // bind depth stencil buffer\r\n        if (camera.clearFlag & ClearFlagBit.DEPTH_STENCIL) {\r\n            pass.addDepthStencil(\r\n                depthStencilName,\r\n                LoadOp.CLEAR,\r\n                StoreOp.DISCARD,\r\n                camera.clearDepth,\r\n                camera.clearStencil,\r\n                camera.clearFlag & ClearFlagBit.DEPTH_STENCIL,\r\n            );\r\n        } else {\r\n            pass.addDepthStencil(depthStencilName, LoadOp.LOAD, StoreOp.DISCARD);\r\n        }\r\n\r\n        // Set shadow map if enabled\r\n        if (cameraConfigs.enableMainLightShadowMap) {\r\n            pass.addTexture(`ShadowMap${id}`, 'cc_shadowMap');\r\n        }\r\n\r\n        // TODO(zhouzhenglong): Separate OPAQUE and MASK queue\r\n\r\n        // add opaque and mask queue\r\n        pass.addQueue(QueueHint.NONE, 'reflect-map') // Currently we put OPAQUE and MASK into one queue, so QueueHint is NONE\r\n            .addScene(camera,\r\n                SceneFlags.OPAQUE | SceneFlags.MASK | SceneFlags.REFLECTION_PROBE,\r\n                mainLight || undefined,\r\n                scene ? scene : undefined);\r\n    }\r\n    private _addForwardRadiancePasses(\r\n        ppl: rendering.BasicPipeline,\r\n        pplConfigs: Readonly<PipelineConfigs>,\r\n        cameraConfigs: Readonly<CameraConfigs & ForwardPassConfigs>,\r\n        id: number,\r\n        camera: renderer.scene.Camera,\r\n        width: number,\r\n        height: number,\r\n        mainLight: renderer.scene.DirectionalLight | null,\r\n        colorName: string,\r\n        depthStencilName: string,\r\n        disableMSAA: boolean = false,\r\n        depthStencilStoreOp: gfx.StoreOp = StoreOp.DISCARD,\r\n    ): rendering.BasicRenderPassBuilder {\r\n        const QueueHint = rendering.QueueHint;\r\n        const SceneFlags = rendering.SceneFlags;\r\n        // ----------------------------------------------------------------\r\n        // Dynamic states\r\n        // ----------------------------------------------------------------\r\n        // Prepare camera clear color\r\n        const clearColor = camera.clearColor; // Reduce C++/TS interop\r\n        this._clearColor.x = clearColor.x;\r\n        this._clearColor.y = clearColor.y;\r\n        this._clearColor.z = clearColor.z;\r\n        this._clearColor.w = clearColor.w;\r\n\r\n        // Prepare camera viewport\r\n        const viewport = camera.viewport; // Reduce C++/TS interop\r\n        this._viewport.left = Math.round(viewport.x * width);\r\n        this._viewport.top = Math.round(viewport.y * height);\r\n        // Here we must use camera.viewport.width instead of camera.viewport.z, which\r\n        // is undefined on native platform. The same as camera.viewport.height.\r\n        this._viewport.width = Math.max(Math.round(viewport.width * width), 1);\r\n        this._viewport.height = Math.max(Math.round(viewport.height * height), 1);\r\n\r\n        // MSAA\r\n        const enableMSAA = !disableMSAA && cameraConfigs.enableMSAA;\r\n        assert(!enableMSAA || cameraConfigs.enableSingleForwardPass);\r\n\r\n        // ----------------------------------------------------------------\r\n        // Forward Lighting (Main Directional Light)\r\n        // ----------------------------------------------------------------\r\n        const pass = cameraConfigs.enableSingleForwardPass\r\n            ? this._addForwardSingleRadiancePass(ppl, pplConfigs, cameraConfigs,\r\n                id, camera, enableMSAA, width, height, mainLight,\r\n                colorName, depthStencilName, depthStencilStoreOp)\r\n            : this._addForwardMultipleRadiancePasses(ppl, cameraConfigs,\r\n                id, camera, width, height, mainLight,\r\n                colorName, depthStencilName, depthStencilStoreOp);\r\n\r\n        // Planar Shadow\r\n        if (cameraConfigs.enableMainLightPlanarShadowMap) {\r\n            this._addPlanarShadowQueue(camera, mainLight, pass);\r\n        }\r\n\r\n        // ----------------------------------------------------------------\r\n        // Forward Lighting (Blend)\r\n        // ----------------------------------------------------------------\r\n        // Add transparent queue\r\n\r\n        const sceneFlags = SceneFlags.BLEND |\r\n            (camera.geometryRenderer\r\n                ? SceneFlags.GEOMETRY\r\n                : SceneFlags.NONE);\r\n\r\n        pass\r\n            .addQueue(QueueHint.BLEND)\r\n            .addScene(camera, sceneFlags, mainLight || undefined);\r\n\r\n        return pass;\r\n    }\r\n    private _addForwardSingleRadiancePass(\r\n        ppl: rendering.BasicPipeline,\r\n        pplConfigs: Readonly<PipelineConfigs>,\r\n        cameraConfigs: Readonly<CameraConfigs & ForwardPassConfigs>,\r\n        id: number,\r\n        camera: renderer.scene.Camera,\r\n        enableMSAA: boolean,\r\n        width: number,\r\n        height: number,\r\n        mainLight: renderer.scene.DirectionalLight | null,\r\n        colorName: string,\r\n        depthStencilName: string,\r\n        depthStencilStoreOp: gfx.StoreOp\r\n    ): rendering.BasicRenderPassBuilder {\r\n        assert(cameraConfigs.enableSingleForwardPass);\r\n        // ----------------------------------------------------------------\r\n        // Forward Lighting (Main Directional Light)\r\n        // ----------------------------------------------------------------\r\n        let pass: rendering.BasicRenderPassBuilder;\r\n        if (enableMSAA) {\r\n            const msaaRadianceName = `MsaaRadiance${id}`;\r\n            const msaaDepthStencilName = `MsaaDepthStencil${id}`;\r\n            const sampleCount = cameraConfigs.settings.msaa.sampleCount;\r\n\r\n            const msPass = ppl.addMultisampleRenderPass(width, height, sampleCount, 0, 'default');\r\n            msPass.name = 'MsaaForwardPass';\r\n\r\n            // MSAA always discards depth stencil\r\n            this._buildForwardMainLightPass(msPass, cameraConfigs, id, camera,\r\n                msaaRadianceName, msaaDepthStencilName, StoreOp.DISCARD, mainLight);\r\n\r\n            msPass.resolveRenderTarget(msaaRadianceName, colorName);\r\n\r\n            pass = msPass;\r\n        } else {\r\n            pass = ppl.addRenderPass(width, height, 'default');\r\n            pass.name = 'ForwardPass';\r\n\r\n            this._buildForwardMainLightPass(pass, cameraConfigs, id, camera,\r\n                colorName, depthStencilName, depthStencilStoreOp, mainLight);\r\n        }\r\n        assert(pass !== undefined);\r\n\r\n        // Forward Lighting (Additive Lights)\r\n        this.forwardLighting.addLightQueues(\r\n            pass,\r\n            camera,\r\n            pplConfigs.mobileMaxSpotLightShadowMaps,\r\n        );\r\n\r\n        return pass;\r\n    }\r\n    private _addForwardMultipleRadiancePasses(\r\n        ppl: rendering.BasicPipeline,\r\n        cameraConfigs: Readonly<CameraConfigs & ForwardPassConfigs>,\r\n        id: number,\r\n        camera: renderer.scene.Camera,\r\n        width: number,\r\n        height: number,\r\n        mainLight: renderer.scene.DirectionalLight | null,\r\n        colorName: string,\r\n        depthStencilName: string,\r\n        depthStencilStoreOp: gfx.StoreOp\r\n    ): rendering.BasicRenderPassBuilder {\r\n        assert(!cameraConfigs.enableSingleForwardPass);\r\n\r\n        // Forward Lighting (Main Directional Light)\r\n        let pass = ppl.addRenderPass(width, height, 'default');\r\n        pass.name = 'ForwardPass';\r\n\r\n        const firstStoreOp = this.forwardLighting.isMultipleLightPassesNeeded()\r\n            ? StoreOp.STORE\r\n            : depthStencilStoreOp;\r\n\r\n        this._buildForwardMainLightPass(pass, cameraConfigs,\r\n            id, camera, colorName, depthStencilName, firstStoreOp, mainLight);\r\n\r\n        // Forward Lighting (Additive Lights)\r\n        pass = this.forwardLighting\r\n            .addLightPasses(colorName, depthStencilName, depthStencilStoreOp,\r\n                id, width, height, camera, this._viewport, ppl, pass);\r\n\r\n        return pass;\r\n    }\r\n    private _buildForwardMainLightPass(\r\n        pass: rendering.BasicRenderPassBuilder,\r\n        cameraConfigs: Readonly<CameraConfigs & ForwardPassConfigs>,\r\n        id: number,\r\n        camera: renderer.scene.Camera,\r\n        colorName: string,\r\n        depthStencilName: string,\r\n        depthStencilStoreOp: gfx.StoreOp,\r\n        mainLight: renderer.scene.DirectionalLight | null,\r\n        scene: renderer.RenderScene | null = null,\r\n    ): void {\r\n        const QueueHint = rendering.QueueHint;\r\n        const SceneFlags = rendering.SceneFlags;\r\n        // set viewport\r\n        pass.setViewport(this._viewport);\r\n\r\n        const colorStoreOp = cameraConfigs.enableMSAA ? StoreOp.DISCARD : StoreOp.STORE;\r\n\r\n        // bind output render target\r\n        if (forwardNeedClearColor(camera)) {\r\n            pass.addRenderTarget(colorName, LoadOp.CLEAR, colorStoreOp, this._clearColor);\r\n        } else {\r\n            pass.addRenderTarget(colorName, LoadOp.LOAD, colorStoreOp);\r\n        }\r\n\r\n        // bind depth stencil buffer\r\n        if (DEBUG) {\r\n            if (colorName === cameraConfigs.colorName &&\r\n                depthStencilName !== cameraConfigs.depthStencilName) {\r\n                warn('Default framebuffer cannot use custom depth stencil buffer');\r\n            }\r\n        }\r\n\r\n        if (camera.clearFlag & ClearFlagBit.DEPTH_STENCIL) {\r\n            pass.addDepthStencil(\r\n                depthStencilName,\r\n                LoadOp.CLEAR,\r\n                depthStencilStoreOp,\r\n                camera.clearDepth,\r\n                camera.clearStencil,\r\n                camera.clearFlag & ClearFlagBit.DEPTH_STENCIL,\r\n            );\r\n        } else {\r\n            pass.addDepthStencil(depthStencilName, LoadOp.LOAD, depthStencilStoreOp);\r\n        }\r\n\r\n        // Set shadow map if enabled\r\n        if (cameraConfigs.enableMainLightShadowMap) {\r\n            pass.addTexture(`ShadowMap${id}`, 'cc_shadowMap');\r\n        }\r\n\r\n        // TODO(zhouzhenglong): Separate OPAQUE and MASK queue\r\n\r\n        // add opaque and mask queue\r\n        pass.addQueue(QueueHint.NONE) // Currently we put OPAQUE and MASK into one queue, so QueueHint is NONE\r\n            .addScene(camera,\r\n                SceneFlags.OPAQUE | SceneFlags.MASK,\r\n                mainLight || undefined,\r\n                scene ? scene : undefined);\r\n    }\r\n    private _addPlanarShadowQueue(\r\n        camera: renderer.scene.Camera,\r\n        mainLight: renderer.scene.DirectionalLight | null,\r\n        pass: rendering.BasicRenderPassBuilder,\r\n    ) {\r\n        const QueueHint = rendering.QueueHint;\r\n        const SceneFlags = rendering.SceneFlags;\r\n        pass.addQueue(QueueHint.BLEND, 'planar-shadow')\r\n            .addScene(\r\n                camera,\r\n                SceneFlags.SHADOW_CASTER | SceneFlags.PLANAR_SHADOW | SceneFlags.BLEND,\r\n                mainLight || undefined,\r\n            );\r\n    }\r\n    private readonly forwardLighting = new ForwardLighting();\r\n    private readonly _viewport = new Viewport();\r\n    private readonly _clearColor = new Color(0, 0, 0, 1);\r\n    private readonly _reflectionProbeClearColor = new Vec3(0, 0, 0);\r\n}\r\n\r\nexport interface BloomPassConfigs {\r\n    enableBloom: boolean;\r\n}\r\n\r\nexport class BuiltinBloomPassBuilder implements rendering.PipelinePassBuilder {\r\n    getConfigOrder(): number {\r\n        return 0;\r\n    }\r\n    getRenderOrder(): number {\r\n        return 200;\r\n    }\r\n    configCamera(\r\n        camera: Readonly<renderer.scene.Camera>,\r\n        pipelineConfigs: Readonly<PipelineConfigs>,\r\n        cameraConfigs: CameraConfigs & BloomPassConfigs): void {\r\n        cameraConfigs.enableBloom\r\n            = cameraConfigs.settings.bloom.enabled\r\n            && !!cameraConfigs.settings.bloom.material;\r\n        if (cameraConfigs.enableBloom) {\r\n            ++cameraConfigs.remainingPasses;\r\n        }\r\n    }\r\n    windowResize(\r\n        ppl: rendering.BasicPipeline,\r\n        pplConfigs: Readonly<PipelineConfigs>,\r\n        cameraConfigs: CameraConfigs & BloomPassConfigs,\r\n        window: renderer.RenderWindow): void {\r\n        if (cameraConfigs.enableBloom) {\r\n            const id = window.renderWindowId;\r\n            let bloomWidth = cameraConfigs.width;\r\n            let bloomHeight = cameraConfigs.height;\r\n            for (let i = 0; i !== cameraConfigs.settings.bloom.iterations + 1; ++i) {\r\n                bloomWidth = Math.max(Math.floor(bloomWidth / 2), 1);\r\n                bloomHeight = Math.max(Math.floor(bloomHeight / 2), 1);\r\n                ppl.addRenderTarget(`BloomTex${id}_${i}`,\r\n                    cameraConfigs.radianceFormat, bloomWidth, bloomHeight);\r\n            }\r\n        }\r\n    }\r\n\r\n    setup(\r\n        ppl: rendering.BasicPipeline,\r\n        pplConfigs: Readonly<PipelineConfigs>,\r\n        cameraConfigs: CameraConfigs & BloomPassConfigs,\r\n        camera: renderer.scene.Camera,\r\n        context: PipelineContext,\r\n        prevRenderPass?: rendering.BasicRenderPassBuilder)\r\n        : rendering.BasicRenderPassBuilder | undefined {\r\n        if (!cameraConfigs.enableBloom) {\r\n            return prevRenderPass;\r\n        }\r\n\r\n        --cameraConfigs.remainingPasses;\r\n        assert(cameraConfigs.remainingPasses >= 0);\r\n        const id = camera.window.renderWindowId;\r\n        assert(!!cameraConfigs.settings.bloom.material);\r\n        return this._addKawaseDualFilterBloomPasses(\r\n            ppl, pplConfigs,\r\n            cameraConfigs,\r\n            cameraConfigs.settings,\r\n            cameraConfigs.settings.bloom.material,\r\n            id,\r\n            cameraConfigs.width,\r\n            cameraConfigs.height,\r\n            context.colorName);\r\n    }\r\n\r\n    private _addKawaseDualFilterBloomPasses(\r\n        ppl: rendering.BasicPipeline,\r\n        pplConfigs: Readonly<PipelineConfigs>,\r\n        cameraConfigs: CameraConfigs & Readonly<BloomPassConfigs>,\r\n        settings: PipelineSettings,\r\n        bloomMaterial: Material,\r\n        id: number,\r\n        width: number,\r\n        height: number,\r\n        radianceName: string,\r\n    ): rendering.BasicRenderPassBuilder {\r\n        const QueueHint = rendering.QueueHint;\r\n        // Based on Kawase Dual Filter Blur. Saves bandwidth on mobile devices.\r\n        // eslint-disable-next-line max-len\r\n        // https://community.arm.com/cfs-file/__key/communityserver-blogs-components-weblogfiles/00-00-00-20-66/siggraph2015_2D00_mmg_2D00_marius_2D00_slides.pdf\r\n\r\n        // Size: [prefilter(1/2), downsample(1/4), downsample(1/8), downsample(1/16), ...]\r\n        const iterations = settings.bloom.iterations;\r\n        const sizeCount = iterations + 1;\r\n        this._bloomWidths.length = sizeCount;\r\n        this._bloomHeights.length = sizeCount;\r\n        this._bloomWidths[0] = Math.max(Math.floor(width / 2), 1);\r\n        this._bloomHeights[0] = Math.max(Math.floor(height / 2), 1);\r\n        for (let i = 1; i !== sizeCount; ++i) {\r\n            this._bloomWidths[i] = Math.max(Math.floor(this._bloomWidths[i - 1] / 2), 1);\r\n            this._bloomHeights[i] = Math.max(Math.floor(this._bloomHeights[i - 1] / 2), 1);\r\n        }\r\n\r\n        // Bloom texture names\r\n        this._bloomTexNames.length = sizeCount;\r\n        for (let i = 0; i !== sizeCount; ++i) {\r\n            this._bloomTexNames[i] = `BloomTex${id}_${i}`;\r\n        }\r\n\r\n        // Setup bloom parameters\r\n        this._bloomParams.x = pplConfigs.useFloatOutput ? 1 : 0;\r\n        this._bloomParams.x = 0; // unused\r\n        this._bloomParams.z = settings.bloom.threshold;\r\n        this._bloomParams.w = settings.bloom.enableAlphaMask ? 1 : 0;\r\n\r\n        // Prefilter pass\r\n        const prefilterPass = ppl.addRenderPass(this._bloomWidths[0], this._bloomHeights[0], 'cc-bloom-prefilter');\r\n        prefilterPass.addRenderTarget(\r\n            this._bloomTexNames[0],\r\n            LoadOp.CLEAR,\r\n            StoreOp.STORE,\r\n            this._clearColorTransparentBlack,\r\n        );\r\n        prefilterPass.addTexture(radianceName, 'inputTexture');\r\n        prefilterPass.setVec4('g_platform', pplConfigs.platform);\r\n        prefilterPass.setVec4('bloomParams', this._bloomParams);\r\n        prefilterPass\r\n            .addQueue(QueueHint.OPAQUE)\r\n            .addFullscreenQuad(bloomMaterial, 0);\r\n\r\n        // Downsample passes\r\n        for (let i = 1; i !== sizeCount; ++i) {\r\n            const downPass = ppl.addRenderPass(this._bloomWidths[i], this._bloomHeights[i], 'cc-bloom-downsample');\r\n            downPass.addRenderTarget(this._bloomTexNames[i], LoadOp.CLEAR, StoreOp.STORE, this._clearColorTransparentBlack);\r\n            downPass.addTexture(this._bloomTexNames[i - 1], 'bloomTexture');\r\n            this._bloomTexSize.x = this._bloomWidths[i - 1];\r\n            this._bloomTexSize.y = this._bloomHeights[i - 1];\r\n            downPass.setVec4('g_platform', pplConfigs.platform);\r\n            downPass.setVec4('bloomTexSize', this._bloomTexSize);\r\n            downPass\r\n                .addQueue(QueueHint.OPAQUE)\r\n                .addFullscreenQuad(bloomMaterial, 1);\r\n        }\r\n\r\n        // Upsample passes\r\n        for (let i = iterations; i-- > 0;) {\r\n            const upPass = ppl.addRenderPass(this._bloomWidths[i], this._bloomHeights[i], 'cc-bloom-upsample');\r\n            upPass.addRenderTarget(this._bloomTexNames[i], LoadOp.CLEAR, StoreOp.STORE, this._clearColorTransparentBlack);\r\n            upPass.addTexture(this._bloomTexNames[i + 1], 'bloomTexture');\r\n            this._bloomTexSize.x = this._bloomWidths[i + 1];\r\n            this._bloomTexSize.y = this._bloomHeights[i + 1];\r\n            upPass.setVec4('g_platform', pplConfigs.platform);\r\n            upPass.setVec4('bloomTexSize', this._bloomTexSize);\r\n            upPass\r\n                .addQueue(QueueHint.OPAQUE)\r\n                .addFullscreenQuad(bloomMaterial, 2);\r\n        }\r\n\r\n        // Combine pass\r\n        const combinePass = ppl.addRenderPass(width, height, 'cc-bloom-combine');\r\n        combinePass.addRenderTarget(radianceName, LoadOp.LOAD, StoreOp.STORE);\r\n        combinePass.addTexture(this._bloomTexNames[0], 'bloomTexture');\r\n        combinePass.setVec4('g_platform', pplConfigs.platform);\r\n        combinePass.setVec4('bloomParams', this._bloomParams);\r\n        combinePass\r\n            .addQueue(QueueHint.BLEND)\r\n            .addFullscreenQuad(bloomMaterial, 3);\r\n\r\n        if (cameraConfigs.remainingPasses === 0) {\r\n            return addCopyToScreenPass(ppl, pplConfigs, cameraConfigs, radianceName);\r\n        } else {\r\n            return combinePass;\r\n        }\r\n    }\r\n    // Bloom\r\n    private readonly _clearColorTransparentBlack = new Color(0, 0, 0, 0);\r\n    private readonly _bloomParams = new Vec4(0, 0, 0, 0);\r\n    private readonly _bloomTexSize = new Vec4(0, 0, 0, 0);\r\n    private readonly _bloomWidths: Array<number> = [];\r\n    private readonly _bloomHeights: Array<number> = [];\r\n    private readonly _bloomTexNames: Array<string> = [];\r\n}\r\n\r\nexport interface ToneMappingPassConfigs {\r\n    enableToneMapping: boolean;\r\n    enableColorGrading: boolean;\r\n}\r\n\r\nexport class BuiltinToneMappingPassBuilder implements rendering.PipelinePassBuilder {\r\n    getConfigOrder(): number {\r\n        return 0;\r\n    }\r\n    getRenderOrder(): number {\r\n        return 300;\r\n    }\r\n    configCamera(\r\n        camera: Readonly<renderer.scene.Camera>,\r\n        pplConfigs: Readonly<PipelineConfigs>,\r\n        cameraConfigs: CameraConfigs & ToneMappingPassConfigs): void {\r\n        const settings = cameraConfigs.settings;\r\n\r\n        cameraConfigs.enableColorGrading\r\n            = settings.colorGrading.enabled\r\n            && !!settings.colorGrading.material\r\n            && !!settings.colorGrading.colorGradingMap;\r\n\r\n        cameraConfigs.enableToneMapping\r\n            = cameraConfigs.enableHDR // From Half to RGBA8\r\n            || cameraConfigs.enableColorGrading; // Color grading\r\n\r\n        if (cameraConfigs.enableToneMapping) {\r\n            ++cameraConfigs.remainingPasses;\r\n        }\r\n    }\r\n    windowResize(\r\n        ppl: rendering.BasicPipeline,\r\n        pplConfigs: Readonly<PipelineConfigs>,\r\n        cameraConfigs: CameraConfigs & ToneMappingPassConfigs): void {\r\n        if (cameraConfigs.enableColorGrading) {\r\n            assert(!!cameraConfigs.settings.colorGrading.material);\r\n            cameraConfigs.settings.colorGrading.material.setProperty(\r\n                'colorGradingMap',\r\n                cameraConfigs.settings.colorGrading.colorGradingMap);\r\n        }\r\n    }\r\n    setup(\r\n        ppl: rendering.BasicPipeline,\r\n        pplConfigs: Readonly<PipelineConfigs>,\r\n        cameraConfigs: CameraConfigs & ToneMappingPassConfigs,\r\n        camera: renderer.scene.Camera,\r\n        context: PipelineContext,\r\n        prevRenderPass?: rendering.BasicRenderPassBuilder)\r\n        : rendering.BasicRenderPassBuilder | undefined {\r\n        if (!cameraConfigs.enableToneMapping) {\r\n            return prevRenderPass;\r\n        }\r\n\r\n        --cameraConfigs.remainingPasses;\r\n        assert(cameraConfigs.remainingPasses >= 0);\r\n        if (cameraConfigs.remainingPasses === 0) {\r\n            return this._addCopyAndTonemapPass(ppl, pplConfigs, cameraConfigs,\r\n                cameraConfigs.width, cameraConfigs.height,\r\n                context.colorName, cameraConfigs.colorName);\r\n        } else {\r\n            const id = cameraConfigs.renderWindowId;\r\n            const ldrColorPrefix = cameraConfigs.enableShadingScale\r\n                ? `ScaledLdrColor`\r\n                : `LdrColor`;\r\n\r\n            const ldrColorName = getPingPongRenderTarget(context.colorName, ldrColorPrefix, id);\r\n            const radianceName = context.colorName;\r\n            context.colorName = ldrColorName;\r\n\r\n            return this._addCopyAndTonemapPass(ppl, pplConfigs, cameraConfigs,\r\n                cameraConfigs.width, cameraConfigs.height,\r\n                radianceName, ldrColorName);\r\n        }\r\n    }\r\n    private _addCopyAndTonemapPass(\r\n        ppl: rendering.BasicPipeline,\r\n        pplConfigs: Readonly<PipelineConfigs>,\r\n        cameraConfigs: CameraConfigs & ToneMappingPassConfigs,\r\n        width: number,\r\n        height: number,\r\n        radianceName: string,\r\n        colorName: string,\r\n    ): rendering.BasicRenderPassBuilder {\r\n        let pass: rendering.BasicRenderPassBuilder;\r\n        const settings = cameraConfigs.settings;\r\n        if (cameraConfigs.enableColorGrading) {\r\n            assert(!!settings.colorGrading.material);\r\n            assert(!!settings.colorGrading.colorGradingMap);\r\n\r\n            const lutTex = settings.colorGrading.colorGradingMap;\r\n            this._colorGradingTexSize.x = lutTex.width;\r\n            this._colorGradingTexSize.y = lutTex.height;\r\n\r\n            const isSquareMap = lutTex.width === lutTex.height;\r\n            if (isSquareMap) {\r\n                pass = ppl.addRenderPass(width, height, 'cc-color-grading-8x8');\r\n            } else {\r\n                pass = ppl.addRenderPass(width, height, 'cc-color-grading-nx1');\r\n            }\r\n            pass.addRenderTarget(colorName, LoadOp.CLEAR, StoreOp.STORE, sClearColorTransparentBlack);\r\n            pass.addTexture(radianceName, 'sceneColorMap');\r\n            pass.setVec4('g_platform', pplConfigs.platform);\r\n            pass.setVec2('lutTextureSize', this._colorGradingTexSize);\r\n            pass.setFloat('contribute', settings.colorGrading.contribute);\r\n            pass.addQueue(rendering.QueueHint.OPAQUE)\r\n                .addFullscreenQuad(settings.colorGrading.material, isSquareMap ? 1 : 0);\r\n        } else {\r\n            pass = ppl.addRenderPass(width, height, 'cc-tone-mapping');\r\n            pass.addRenderTarget(colorName, LoadOp.CLEAR, StoreOp.STORE, sClearColorTransparentBlack);\r\n            pass.addTexture(radianceName, 'inputTexture');\r\n            pass.setVec4('g_platform', pplConfigs.platform);\r\n            if (settings.toneMapping.material) {\r\n                pass.addQueue(rendering.QueueHint.OPAQUE)\r\n                    .addFullscreenQuad(settings.toneMapping.material, 0);\r\n            } else {\r\n                assert(!!cameraConfigs.copyAndTonemapMaterial);\r\n                pass.addQueue(rendering.QueueHint.OPAQUE)\r\n                    .addFullscreenQuad(cameraConfigs.copyAndTonemapMaterial, 0);\r\n            }\r\n        }\r\n        return pass;\r\n    }\r\n    private readonly _colorGradingTexSize = new Vec2(0, 0);\r\n}\r\n\r\nexport interface FXAAPassConfigs {\r\n    enableFXAA: boolean;\r\n}\r\n\r\nexport class BuiltinFXAAPassBuilder implements rendering.PipelinePassBuilder {\r\n    getConfigOrder(): number {\r\n        return 0;\r\n    }\r\n    getRenderOrder(): number {\r\n        return 400;\r\n    }\r\n    configCamera(\r\n        camera: Readonly<renderer.scene.Camera>,\r\n        pplConfigs: Readonly<PipelineConfigs>,\r\n        cameraConfigs: CameraConfigs & FXAAPassConfigs): void {\r\n        cameraConfigs.enableFXAA\r\n            = cameraConfigs.settings.fxaa.enabled\r\n            && !!cameraConfigs.settings.fxaa.material;\r\n        if (cameraConfigs.enableFXAA) {\r\n            ++cameraConfigs.remainingPasses;\r\n        }\r\n    }\r\n    setup(\r\n        ppl: rendering.BasicPipeline,\r\n        pplConfigs: Readonly<PipelineConfigs>,\r\n        cameraConfigs: CameraConfigs & FXAAPassConfigs,\r\n        camera: renderer.scene.Camera,\r\n        context: PipelineContext,\r\n        prevRenderPass?: rendering.BasicRenderPassBuilder)\r\n        : rendering.BasicRenderPassBuilder | undefined {\r\n        if (!cameraConfigs.enableFXAA) {\r\n            return prevRenderPass;\r\n        }\r\n        --cameraConfigs.remainingPasses;\r\n        assert(cameraConfigs.remainingPasses >= 0);\r\n\r\n        const id = cameraConfigs.renderWindowId;\r\n        const ldrColorPrefix = cameraConfigs.enableShadingScale\r\n            ? `ScaledLdrColor`\r\n            : `LdrColor`;\r\n        const ldrColorName = getPingPongRenderTarget(context.colorName, ldrColorPrefix, id);\r\n\r\n        assert(!!cameraConfigs.settings.fxaa.material);\r\n        if (cameraConfigs.remainingPasses === 0) {\r\n            if (cameraConfigs.enableShadingScale) {\r\n                this._addFxaaPass(ppl, pplConfigs,\r\n                    cameraConfigs.settings.fxaa.material,\r\n                    cameraConfigs.width,\r\n                    cameraConfigs.height,\r\n                    context.colorName,\r\n                    ldrColorName);\r\n                return addCopyToScreenPass(ppl, pplConfigs, cameraConfigs, ldrColorName);\r\n            } else {\r\n                assert(cameraConfigs.width === cameraConfigs.nativeWidth);\r\n                assert(cameraConfigs.height === cameraConfigs.nativeHeight);\r\n                return this._addFxaaPass(ppl, pplConfigs,\r\n                    cameraConfigs.settings.fxaa.material,\r\n                    cameraConfigs.width,\r\n                    cameraConfigs.height,\r\n                    context.colorName,\r\n                    cameraConfigs.colorName);\r\n            }\r\n        } else {\r\n            const inputColorName = context.colorName;\r\n            context.colorName = ldrColorName;\r\n            const lastPass = this._addFxaaPass(ppl, pplConfigs,\r\n                cameraConfigs.settings.fxaa.material,\r\n                cameraConfigs.width,\r\n                cameraConfigs.height,\r\n                inputColorName,\r\n                ldrColorName);\r\n            return lastPass;\r\n        }\r\n    }\r\n    private _addFxaaPass(\r\n        ppl: rendering.BasicPipeline,\r\n        pplConfigs: Readonly<PipelineConfigs>,\r\n        fxaaMaterial: Material,\r\n        width: number,\r\n        height: number,\r\n        ldrColorName: string,\r\n        colorName: string,\r\n    ): rendering.BasicRenderPassBuilder {\r\n        this._fxaaParams.x = width;\r\n        this._fxaaParams.y = height;\r\n        this._fxaaParams.z = 1 / width;\r\n        this._fxaaParams.w = 1 / height;\r\n\r\n        const pass = ppl.addRenderPass(width, height, 'cc-fxaa');\r\n        pass.addRenderTarget(colorName, LoadOp.CLEAR, StoreOp.STORE, sClearColorTransparentBlack);\r\n        pass.addTexture(ldrColorName, 'sceneColorMap');\r\n        pass.setVec4('g_platform', pplConfigs.platform);\r\n        pass.setVec4('texSize', this._fxaaParams);\r\n        pass.addQueue(rendering.QueueHint.OPAQUE)\r\n            .addFullscreenQuad(fxaaMaterial, 0);\r\n        return pass;\r\n    }\r\n    // FXAA\r\n    private readonly _fxaaParams = new Vec4(0, 0, 0, 0);\r\n}\r\n\r\nexport interface FSRPassConfigs {\r\n    enableFSR: boolean;\r\n}\r\n\r\nexport class BuiltinFsrPassBuilder implements rendering.PipelinePassBuilder {\r\n    getConfigOrder(): number {\r\n        return 0;\r\n    }\r\n    getRenderOrder(): number {\r\n        return 500;\r\n    }\r\n    configCamera(\r\n        camera: Readonly<renderer.scene.Camera>,\r\n        pplConfigs: Readonly<PipelineConfigs>,\r\n        cameraConfigs: CameraConfigs & FSRPassConfigs): void {\r\n        // FSR (Depend on Shading scale)\r\n        cameraConfigs.enableFSR = cameraConfigs.settings.fsr.enabled\r\n            && !!cameraConfigs.settings.fsr.material\r\n            && cameraConfigs.enableShadingScale\r\n            && cameraConfigs.shadingScale < 1.0;\r\n\r\n        if (cameraConfigs.enableFSR) {\r\n            ++cameraConfigs.remainingPasses;\r\n        }\r\n    }\r\n    setup(\r\n        ppl: rendering.BasicPipeline,\r\n        pplConfigs: Readonly<PipelineConfigs>,\r\n        cameraConfigs: CameraConfigs & FSRPassConfigs,\r\n        camera: renderer.scene.Camera,\r\n        context: PipelineContext,\r\n        prevRenderPass?: rendering.BasicRenderPassBuilder)\r\n        : rendering.BasicRenderPassBuilder | undefined {\r\n        if (!cameraConfigs.enableFSR) {\r\n            return prevRenderPass;\r\n        }\r\n        --cameraConfigs.remainingPasses;\r\n\r\n        const inputColorName = context.colorName;\r\n        const outputColorName\r\n            = cameraConfigs.remainingPasses === 0\r\n                ? cameraConfigs.colorName\r\n                : getPingPongRenderTarget(context.colorName, 'UiColor', cameraConfigs.renderWindowId);\r\n        context.colorName = outputColorName;\r\n\r\n        assert(!!cameraConfigs.settings.fsr.material);\r\n        return this._addFsrPass(ppl, pplConfigs, cameraConfigs,\r\n            cameraConfigs.settings,\r\n            cameraConfigs.settings.fsr.material,\r\n            cameraConfigs.renderWindowId,\r\n            cameraConfigs.width,\r\n            cameraConfigs.height,\r\n            inputColorName,\r\n            cameraConfigs.nativeWidth,\r\n            cameraConfigs.nativeHeight,\r\n            outputColorName);\r\n    }\r\n    private _addFsrPass(\r\n        ppl: rendering.BasicPipeline,\r\n        pplConfigs: Readonly<PipelineConfigs>,\r\n        cameraConfigs: CameraConfigs & FSRPassConfigs,\r\n        settings: PipelineSettings,\r\n        fsrMaterial: Material,\r\n        id: number,\r\n        width: number,\r\n        height: number,\r\n        inputColorName: string,\r\n        nativeWidth: number,\r\n        nativeHeight: number,\r\n        outputColorName: string,\r\n    ): rendering.BasicRenderPassBuilder {\r\n        this._fsrTexSize.x = width;\r\n        this._fsrTexSize.y = height;\r\n        this._fsrTexSize.z = nativeWidth;\r\n        this._fsrTexSize.w = nativeHeight;\r\n        this._fsrParams.x = clamp(1.0 - settings.fsr.sharpness, 0.02, 0.98);\r\n\r\n        const uiColorPrefix = 'UiColor';\r\n\r\n        const fsrColorName = getPingPongRenderTarget(outputColorName, uiColorPrefix, id);\r\n\r\n        const easuPass = ppl.addRenderPass(nativeWidth, nativeHeight, 'cc-fsr-easu');\r\n        easuPass.addRenderTarget(fsrColorName, LoadOp.CLEAR, StoreOp.STORE, sClearColorTransparentBlack);\r\n        easuPass.addTexture(inputColorName, 'outputResultMap');\r\n        easuPass.setVec4('g_platform', pplConfigs.platform);\r\n        easuPass.setVec4('fsrTexSize', this._fsrTexSize);\r\n        easuPass\r\n            .addQueue(rendering.QueueHint.OPAQUE)\r\n            .addFullscreenQuad(fsrMaterial, 0);\r\n\r\n        const rcasPass = ppl.addRenderPass(nativeWidth, nativeHeight, 'cc-fsr-rcas');\r\n        rcasPass.addRenderTarget(outputColorName, LoadOp.CLEAR, StoreOp.STORE, sClearColorTransparentBlack);\r\n        rcasPass.addTexture(fsrColorName, 'outputResultMap');\r\n        rcasPass.setVec4('g_platform', pplConfigs.platform);\r\n        rcasPass.setVec4('fsrTexSize', this._fsrTexSize);\r\n        rcasPass.setVec4('fsrParams', this._fsrParams);\r\n        rcasPass\r\n            .addQueue(rendering.QueueHint.OPAQUE)\r\n            .addFullscreenQuad(fsrMaterial, 1);\r\n\r\n        return rcasPass;\r\n    }\r\n    // FSR\r\n    private readonly _fsrParams = new Vec4(0, 0, 0, 0);\r\n    private readonly _fsrTexSize = new Vec4(0, 0, 0, 0);\r\n}\r\n\r\nexport class BuiltinUiPassBuilder implements rendering.PipelinePassBuilder {\r\n    getConfigOrder(): number {\r\n        return 0;\r\n    }\r\n    getRenderOrder(): number {\r\n        return 1000;\r\n    }\r\n    setup(\r\n        ppl: rendering.BasicPipeline,\r\n        pplConfigs: Readonly<PipelineConfigs>,\r\n        cameraConfigs: CameraConfigs & FSRPassConfigs,\r\n        camera: renderer.scene.Camera,\r\n        context: PipelineContext,\r\n        prevRenderPass?: rendering.BasicRenderPassBuilder)\r\n        : rendering.BasicRenderPassBuilder | undefined {\r\n        assert(!!prevRenderPass);\r\n\r\n        let flags = rendering.SceneFlags.UI;\r\n        if (cameraConfigs.enableProfiler) {\r\n            flags |= rendering.SceneFlags.PROFILER;\r\n            prevRenderPass.showStatistics = true;\r\n        }\r\n        prevRenderPass\r\n            .addQueue(rendering.QueueHint.BLEND, 'default', 'default')\r\n            .addScene(camera, flags);\r\n\r\n        return prevRenderPass;\r\n    }\r\n}\r\n\r\nif (rendering) {\r\n\r\n    const { QueueHint, SceneFlags } = rendering;\r\n\r\n    class BuiltinPipelineBuilder implements rendering.PipelineBuilder {\r\n        private readonly _pipelineEvent: PipelineEventProcessor = cclegacy.director.root.pipelineEvent as PipelineEventProcessor;\r\n        private readonly _forwardPass = new BuiltinForwardPassBuilder();\r\n        private readonly _bloomPass = new BuiltinBloomPassBuilder();\r\n        private readonly _toneMappingPass = new BuiltinToneMappingPassBuilder();\r\n        private readonly _fxaaPass = new BuiltinFXAAPassBuilder();\r\n        private readonly _fsrPass = new BuiltinFsrPassBuilder();\r\n        private readonly _uiPass = new BuiltinUiPassBuilder();\r\n        // Internal cached resources\r\n        private readonly _clearColor = new Color(0, 0, 0, 1);\r\n        private readonly _viewport = new Viewport();\r\n        private readonly _configs = new PipelineConfigs();\r\n        private readonly _cameraConfigs = new CameraConfigs();\r\n        // Materials\r\n        private readonly _copyAndTonemapMaterial = new Material();\r\n\r\n        // Internal States\r\n        private _initialized = false; // TODO(zhouzhenglong): Make default effect asset loading earlier and remove this flag\r\n        private _passBuilders: rendering.PipelinePassBuilder[] = [];\r\n\r\n        private _setupPipelinePreview(\r\n            camera: renderer.scene.Camera,\r\n            cameraConfigs: CameraConfigs) {\r\n            const isEditorView: boolean\r\n                = camera.cameraUsage === CameraUsage.SCENE_VIEW\r\n                || camera.cameraUsage === CameraUsage.PREVIEW;\r\n\r\n            if (isEditorView) {\r\n                const editorSettings = rendering.getEditorPipelineSettings() as PipelineSettings | null;\r\n                if (editorSettings) {\r\n                    cameraConfigs.settings = editorSettings;\r\n                } else {\r\n                    cameraConfigs.settings = defaultSettings;\r\n                }\r\n            } else {\r\n                if (camera.pipelineSettings) {\r\n                    cameraConfigs.settings = camera.pipelineSettings as PipelineSettings;\r\n                } else {\r\n                    cameraConfigs.settings = defaultSettings;\r\n                }\r\n            }\r\n        }\r\n\r\n        private _preparePipelinePasses(cameraConfigs: CameraConfigs): void {\r\n            const passBuilders = this._passBuilders;\r\n            passBuilders.length = 0;\r\n\r\n            const settings = cameraConfigs.settings as PipelineSettings2;\r\n            if (settings._passes) {\r\n                for (const pass of settings._passes) {\r\n                    passBuilders.push(pass);\r\n                }\r\n                assert(passBuilders.length === settings._passes.length);\r\n            }\r\n\r\n            passBuilders.push(this._forwardPass);\r\n\r\n            if (settings.bloom.enabled) {\r\n                passBuilders.push(this._bloomPass);\r\n            }\r\n\r\n            passBuilders.push(this._toneMappingPass);\r\n\r\n            if (settings.fxaa.enabled) {\r\n                passBuilders.push(this._fxaaPass);\r\n            }\r\n\r\n            if (settings.fsr.enabled) {\r\n                passBuilders.push(this._fsrPass);\r\n            }\r\n            passBuilders.push(this._uiPass);\r\n        }\r\n\r\n        private _setupBuiltinCameraConfigs(\r\n            camera: renderer.scene.Camera,\r\n            pipelineConfigs: PipelineConfigs,\r\n            cameraConfigs: CameraConfigs\r\n        ) {\r\n            const window = camera.window;\r\n            const isMainGameWindow: boolean = camera.cameraUsage === CameraUsage.GAME && !!window.swapchain;\r\n\r\n            // Window\r\n            cameraConfigs.isMainGameWindow = isMainGameWindow;\r\n            cameraConfigs.renderWindowId = window.renderWindowId;\r\n\r\n            // Camera\r\n            cameraConfigs.colorName = window.colorName;\r\n            cameraConfigs.depthStencilName = window.depthStencilName;\r\n\r\n            // Pipeline\r\n            cameraConfigs.enableFullPipeline = (camera.visibility & (Layers.Enum.DEFAULT)) !== 0;\r\n            cameraConfigs.enableProfiler = DEBUG && isMainGameWindow;\r\n            cameraConfigs.remainingPasses = 0;\r\n\r\n            // Shading scale\r\n            cameraConfigs.shadingScale = cameraConfigs.settings.shadingScale;\r\n            cameraConfigs.enableShadingScale = cameraConfigs.settings.enableShadingScale\r\n                && cameraConfigs.shadingScale !== 1.0;\r\n\r\n            cameraConfigs.nativeWidth = Math.max(Math.floor(window.width), 1);\r\n            cameraConfigs.nativeHeight = Math.max(Math.floor(window.height), 1);\r\n\r\n            cameraConfigs.width = cameraConfigs.enableShadingScale\r\n                ? Math.max(Math.floor(cameraConfigs.nativeWidth * cameraConfigs.shadingScale), 1)\r\n                : cameraConfigs.nativeWidth;\r\n            cameraConfigs.height = cameraConfigs.enableShadingScale\r\n                ? Math.max(Math.floor(cameraConfigs.nativeHeight * cameraConfigs.shadingScale), 1)\r\n                : cameraConfigs.nativeHeight;\r\n\r\n            // Radiance\r\n            cameraConfigs.enableHDR = cameraConfigs.enableFullPipeline\r\n                && pipelineConfigs.useFloatOutput;\r\n            cameraConfigs.radianceFormat = cameraConfigs.enableHDR\r\n                ? gfx.Format.RGBA16F : gfx.Format.RGBA8;\r\n\r\n            // Tone Mapping\r\n            cameraConfigs.copyAndTonemapMaterial = this._copyAndTonemapMaterial;\r\n\r\n            // Depth\r\n            cameraConfigs.enableStoreSceneDepth = false;\r\n        }\r\n\r\n        private _setupCameraConfigs(\r\n            camera: renderer.scene.Camera,\r\n            pipelineConfigs: PipelineConfigs,\r\n            cameraConfigs: CameraConfigs\r\n        ): void {\r\n            this._setupPipelinePreview(camera, cameraConfigs);\r\n\r\n            this._preparePipelinePasses(cameraConfigs);\r\n\r\n            sortPipelinePassBuildersByConfigOrder(this._passBuilders);\r\n\r\n            this._setupBuiltinCameraConfigs(camera, pipelineConfigs, cameraConfigs);\r\n\r\n            for (const builder of this._passBuilders) {\r\n                if (builder.configCamera) {\r\n                    builder.configCamera(camera, pipelineConfigs, cameraConfigs);\r\n                }\r\n            }\r\n        }\r\n\r\n        // ----------------------------------------------------------------\r\n        // Interface\r\n        // ----------------------------------------------------------------\r\n        windowResize(\r\n            ppl: rendering.BasicPipeline,\r\n            window: renderer.RenderWindow,\r\n            camera: renderer.scene.Camera,\r\n            nativeWidth: number,\r\n            nativeHeight: number,\r\n        ): void {\r\n            setupPipelineConfigs(ppl, this._configs);\r\n\r\n            this._setupCameraConfigs(camera, this._configs, this._cameraConfigs);\r\n\r\n            // Render Window (UI)\r\n            const id = window.renderWindowId;\r\n\r\n            ppl.addRenderWindow(this._cameraConfigs.colorName,\r\n                Format.RGBA8, nativeWidth, nativeHeight, window,\r\n                this._cameraConfigs.depthStencilName);\r\n\r\n            const width = this._cameraConfigs.width;\r\n            const height = this._cameraConfigs.height;\r\n\r\n            if (this._cameraConfigs.enableShadingScale) {\r\n                ppl.addDepthStencil(`ScaledSceneDepth_${id}`, Format.DEPTH_STENCIL, width, height);\r\n                ppl.addRenderTarget(`ScaledRadiance0_${id}`, this._cameraConfigs.radianceFormat, width, height);\r\n                ppl.addRenderTarget(`ScaledRadiance1_${id}`, this._cameraConfigs.radianceFormat, width, height);\r\n                ppl.addRenderTarget(`ScaledLdrColor0_${id}`, Format.RGBA8, width, height);\r\n                ppl.addRenderTarget(`ScaledLdrColor1_${id}`, Format.RGBA8, width, height);\r\n            } else {\r\n                ppl.addDepthStencil(`SceneDepth_${id}`, Format.DEPTH_STENCIL, width, height);\r\n                ppl.addRenderTarget(`Radiance0_${id}`, this._cameraConfigs.radianceFormat, width, height);\r\n                ppl.addRenderTarget(`Radiance1_${id}`, this._cameraConfigs.radianceFormat, width, height);\r\n                ppl.addRenderTarget(`LdrColor0_${id}`, Format.RGBA8, width, height);\r\n                ppl.addRenderTarget(`LdrColor1_${id}`, Format.RGBA8, width, height);\r\n            }\r\n            ppl.addRenderTarget(`UiColor0_${id}`, Format.RGBA8, nativeWidth, nativeHeight);\r\n            ppl.addRenderTarget(`UiColor1_${id}`, Format.RGBA8, nativeWidth, nativeHeight);\r\n\r\n            for (const builder of this._passBuilders) {\r\n                if (builder.windowResize) {\r\n                    builder.windowResize(ppl, this._configs, this._cameraConfigs, window, camera, nativeWidth, nativeHeight);\r\n                }\r\n            }\r\n        }\r\n        setup(cameras: renderer.scene.Camera[], ppl: rendering.BasicPipeline): void {\r\n            // TODO(zhouzhenglong): Make default effect asset loading earlier and remove _initMaterials\r\n            if (this._initMaterials(ppl)) {\r\n                return;\r\n            }\r\n            // Render cameras\r\n            // log(`==================== One Frame ====================`);\r\n            for (const camera of cameras) {\r\n                // Skip invalid camera\r\n                if (!camera.scene || !camera.window) {\r\n                    continue;\r\n                }\r\n                // Setup camera configs\r\n                this._setupCameraConfigs(camera, this._configs, this._cameraConfigs);\r\n                // log(`Setup camera: ${camera.node!.name}, window: ${camera.window.renderWindowId}, isFull: ${this._cameraConfigs.enableFullPipeline}, `\r\n                //     + `size: ${camera.window.width}x${camera.window.height}`);\r\n\r\n                this._pipelineEvent.emit(PipelineEventType.RENDER_CAMERA_BEGIN, camera);\r\n\r\n                // Build pipeline\r\n                if (this._cameraConfigs.enableFullPipeline) {\r\n                    this._buildForwardPipeline(ppl, camera, camera.scene, this._passBuilders);\r\n                } else {\r\n                    this._buildSimplePipeline(ppl, camera);\r\n                }\r\n\r\n                this._pipelineEvent.emit(PipelineEventType.RENDER_CAMERA_END, camera);\r\n            }\r\n        }\r\n        // ----------------------------------------------------------------\r\n        // Pipelines\r\n        // ----------------------------------------------------------------\r\n        private _buildSimplePipeline(\r\n            ppl: rendering.BasicPipeline,\r\n            camera: renderer.scene.Camera,\r\n        ): void {\r\n            const width = Math.max(Math.floor(camera.window.width), 1);\r\n            const height = Math.max(Math.floor(camera.window.height), 1);\r\n            const colorName = this._cameraConfigs.colorName;\r\n            const depthStencilName = this._cameraConfigs.depthStencilName;\r\n\r\n            const viewport = camera.viewport;  // Reduce C++/TS interop\r\n            this._viewport.left = Math.round(viewport.x * width);\r\n            this._viewport.top = Math.round(viewport.y * height);\r\n            // Here we must use camera.viewport.width instead of camera.viewport.z, which\r\n            // is undefined on native platform. The same as camera.viewport.height.\r\n            this._viewport.width = Math.max(Math.round(viewport.width * width), 1);\r\n            this._viewport.height = Math.max(Math.round(viewport.height * height), 1);\r\n\r\n            const clearColor = camera.clearColor;  // Reduce C++/TS interop\r\n            this._clearColor.x = clearColor.x;\r\n            this._clearColor.y = clearColor.y;\r\n            this._clearColor.z = clearColor.z;\r\n            this._clearColor.w = clearColor.w;\r\n\r\n            const pass = ppl.addRenderPass(width, height, 'default');\r\n\r\n            // bind output render target\r\n            if (forwardNeedClearColor(camera)) {\r\n                pass.addRenderTarget(colorName, LoadOp.CLEAR, StoreOp.STORE, this._clearColor);\r\n            } else {\r\n                pass.addRenderTarget(colorName, LoadOp.LOAD, StoreOp.STORE);\r\n            }\r\n\r\n            // bind depth stencil buffer\r\n            if (camera.clearFlag & ClearFlagBit.DEPTH_STENCIL) {\r\n                pass.addDepthStencil(\r\n                    depthStencilName,\r\n                    LoadOp.CLEAR,\r\n                    StoreOp.DISCARD,\r\n                    camera.clearDepth,\r\n                    camera.clearStencil,\r\n                    camera.clearFlag & ClearFlagBit.DEPTH_STENCIL,\r\n                );\r\n            } else {\r\n                pass.addDepthStencil(depthStencilName, LoadOp.LOAD, StoreOp.DISCARD);\r\n            }\r\n\r\n            pass.setViewport(this._viewport);\r\n\r\n            // The opaque queue is used for Reflection probe preview\r\n            pass.addQueue(QueueHint.OPAQUE)\r\n                .addScene(camera, SceneFlags.OPAQUE);\r\n\r\n            // The blend queue is used for UI and Gizmos\r\n            let flags = SceneFlags.BLEND | SceneFlags.UI;\r\n            if (this._cameraConfigs.enableProfiler) {\r\n                flags |= SceneFlags.PROFILER;\r\n                pass.showStatistics = true;\r\n            }\r\n            pass.addQueue(QueueHint.BLEND)\r\n                .addScene(camera, flags);\r\n        }\r\n\r\n        private _buildForwardPipeline(\r\n            ppl: rendering.BasicPipeline,\r\n            camera: renderer.scene.Camera,\r\n            scene: renderer.RenderScene,\r\n            passBuilders: rendering.PipelinePassBuilder[],\r\n        ): void {\r\n            sortPipelinePassBuildersByRenderOrder(passBuilders);\r\n\r\n            const context: PipelineContext = {\r\n                colorName: '',\r\n                depthStencilName: '',\r\n            };\r\n\r\n            let lastPass: rendering.BasicRenderPassBuilder | undefined = undefined;\r\n\r\n            for (const builder of passBuilders) {\r\n                if (builder.setup) {\r\n                    lastPass = builder.setup(ppl, this._configs, this._cameraConfigs,\r\n                        camera, context, lastPass);\r\n                }\r\n            }\r\n\r\n            assert(this._cameraConfigs.remainingPasses === 0);\r\n        }\r\n\r\n        private _initMaterials(ppl: rendering.BasicPipeline): number {\r\n            if (this._initialized) {\r\n                return 0;\r\n            }\r\n\r\n            setupPipelineConfigs(ppl, this._configs);\r\n\r\n            // When add new effect asset, please add its uuid to the dependentAssets in cc.config.json.\r\n            this._copyAndTonemapMaterial._uuid = `builtin-pipeline-tone-mapping-material`;\r\n            this._copyAndTonemapMaterial.initialize({ effectName: 'pipeline/post-process/tone-mapping' });\r\n\r\n            if (this._copyAndTonemapMaterial.effectAsset) {\r\n                this._initialized = true;\r\n            }\r\n\r\n            return this._initialized ? 0 : 1;\r\n        }\r\n    }\r\n\r\n    rendering.setCustomPipeline('Builtin', new BuiltinPipelineBuilder());\r\n\r\n} // if (rendering)\r\n"]}